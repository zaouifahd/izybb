//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let entitlements = entitlements()
  let id = id()
  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 352 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: 3 cm
      ///
      /// Key: 3 cm
      ///
      /// Locales: en, tr
      var cm: RswiftResources.StringResource { .init(key: "3 cm", tableName: "Localizable", source: source, developmentValue: "3 cm", comment: nil) }

      /// en translation: 35 km
      ///
      /// Key: 35 km
      ///
      /// Locales: en, tr
      var km: RswiftResources.StringResource { .init(key: "35 km", tableName: "Localizable", source: source, developmentValue: "35 km", comment: nil) }

      /// en translation: ALREADY HAVE AN ACCOUNT?
      ///
      /// Key: ALREADY HAVE AN ACCOUNT?
      ///
      /// Locales: en, tr
      var alreadyhaveanaccounT: RswiftResources.StringResource { .init(key: "ALREADY HAVE AN ACCOUNT?", tableName: "Localizable", source: source, developmentValue: "ALREADY HAVE AN ACCOUNT?", comment: nil) }

      /// en translation: Account Number / IBAN
      ///
      /// Key: Account Number / IBAN
      ///
      /// Locales: en, tr
      var accountNumberIBAN: RswiftResources.StringResource { .init(key: "Account Number / IBAN", tableName: "Localizable", source: source, developmentValue: "Account Number / IBAN", comment: nil) }

      /// en translation: Account name
      ///
      /// Key: Account name
      ///
      /// Locales: en, tr
      var accountName: RswiftResources.StringResource { .init(key: "Account name", tableName: "Localizable", source: source, developmentValue: "Account name", comment: nil) }

      /// en translation: Activating Premium will help you meet more people, faster.
      ///
      /// Key: Activating Premium will help you meet more people, faster.
      ///
      /// Locales: en, tr
      var activatingPremiumWillHelpYouMeetMorePeopleFaster: RswiftResources.StringResource { .init(key: "Activating Premium will help you meet more people, faster.", tableName: "Localizable", source: source, developmentValue: "Activating Premium will help you meet more people, faster.", comment: nil) }

      /// en translation: Add Comment here
      ///
      /// Key: Add Comment here
      ///
      /// Locales: en, tr
      var addCommentHere: RswiftResources.StringResource { .init(key: "Add Comment here", tableName: "Localizable", source: source, developmentValue: "Add Comment here", comment: nil) }

      /// en translation: Add code number 
      ///
      /// Key: Add code number 
      ///
      /// Locales: en, tr
      var addCodeNumber: RswiftResources.StringResource { .init(key: "Add code number ", tableName: "Localizable", source: source, developmentValue: "Add code number ", comment: nil) }

      /// en translation: Age
      ///
      /// Key: Age
      ///
      /// Locales: en, tr
      var age: RswiftResources.StringResource { .init(key: "Age", tableName: "Localizable", source: source, developmentValue: "Age", comment: nil) }

      /// en translation: Amount
      ///
      /// Key: Amount
      ///
      /// Locales: en, tr
      var amount: RswiftResources.StringResource { .init(key: "Amount", tableName: "Localizable", source: source, developmentValue: "Amount", comment: nil) }

      /// en translation: Amount shouldn't be less than 50.
      ///
      /// Key: Amount shouldn't be less than 50.
      ///
      /// Locales: en, tr
      var amountShouldnTBeLessThan50: RswiftResources.StringResource { .init(key: "Amount shouldn't be less than 50.", tableName: "Localizable", source: source, developmentValue: "Amount shouldn't be less than 50.", comment: nil) }

      /// en translation: Antoian Kordiyal
      ///
      /// Key: Antoian Kordiyal
      ///
      /// Locales: en, tr
      var antoianKordiyal: RswiftResources.StringResource { .init(key: "Antoian Kordiyal", tableName: "Localizable", source: source, developmentValue: "Antoian Kordiyal", comment: nil) }

      /// en translation: Apple Pay
      ///
      /// Key: Apple Pay
      ///
      /// Locales: en, tr
      var applePay: RswiftResources.StringResource { .init(key: "Apple Pay", tableName: "Localizable", source: source, developmentValue: "Apple Pay", comment: nil) }

      /// en translation: Apply Filter
      ///
      /// Key: Apply Filter
      ///
      /// Locales: en, tr
      var applyFilter: RswiftResources.StringResource { .init(key: "Apply Filter", tableName: "Localizable", source: source, developmentValue: "Apply Filter", comment: nil) }

      /// en translation: Are you sure you want to logout?
      ///
      /// Key: Are you sure you want to logout?
      ///
      /// Locales: en, tr
      var areYouSureYouWantToLogout: RswiftResources.StringResource { .init(key: "Are you sure you want to logout?", tableName: "Localizable", source: source, developmentValue: "Are you sure you want to logout?", comment: nil) }

      /// en translation: Are you sure you want to unblock this user ?
      ///
      /// Key: Are you sure you want to unblock this user ?
      ///
      /// Locales: en, tr
      var areYouSureYouWantToUnblockThisUser: RswiftResources.StringResource { .init(key: "Are you sure you want to unblock this user ?", tableName: "Localizable", source: source, developmentValue: "Are you sure you want to unblock this user ?", comment: nil) }

      /// en translation: BACKGROUND
      ///
      /// Key: BACKGROUND
      ///
      /// Locales: en, tr
      var backgrounD: RswiftResources.StringResource { .init(key: "BACKGROUND", tableName: "Localizable", source: source, developmentValue: "BACKGROUND", comment: nil) }

      /// en translation: BASICS
      ///
      /// Key: BASICS
      ///
      /// Locales: en, tr
      var basicS: RswiftResources.StringResource { .init(key: "BASICS", tableName: "Localizable", source: source, developmentValue: "BASICS", comment: nil) }

      /// en translation: BOTH
      ///
      /// Key: BOTH
      ///
      /// Locales: en, tr
      var botH: RswiftResources.StringResource { .init(key: "BOTH", tableName: "Localizable", source: source, developmentValue: "BOTH", comment: nil) }

      /// en translation: BOYS
      ///
      /// Key: BOYS
      ///
      /// Locales: en, tr
      var boyS: RswiftResources.StringResource { .init(key: "BOYS", tableName: "Localizable", source: source, developmentValue: "BOYS", comment: nil) }

      /// en translation: BY REGISTERING YOU AGREE TO OUR
      ///
      /// Key: BY REGISTERING YOU AGREE TO OUR
      ///
      /// Locales: en, tr
      var byregisteringyouagreetoouR: RswiftResources.StringResource { .init(key: "BY REGISTERING YOU AGREE TO OUR", tableName: "Localizable", source: source, developmentValue: "BY REGISTERING YOU AGREE TO OUR", comment: nil) }

      /// en translation: BY REGISTERING YOU AGREE TO OUR TERM OF SERVICE
      ///
      /// Key: BY REGISTERING YOU AGREE TO OUR TERM OF SERVICE
      ///
      /// Locales: en, tr
      var byregisteringyouagreetoourtermofservicE: RswiftResources.StringResource { .init(key: "BY REGISTERING YOU AGREE TO OUR TERM OF SERVICE", tableName: "Localizable", source: source, developmentValue: "BY REGISTERING YOU AGREE TO OUR TERM OF SERVICE", comment: nil) }

      /// en translation: BY REGISTERING YOU AGREE TO OUR TERMS OF SERVICE
      ///
      /// Key: BY REGISTERING YOU AGREE TO OUR TERMS OF SERVICE
      ///
      /// Locales: en, tr
      var byregisteringyouagreetoourtermsofservicE: RswiftResources.StringResource { .init(key: "BY REGISTERING YOU AGREE TO OUR TERMS OF SERVICE", tableName: "Localizable", source: source, developmentValue: "BY REGISTERING YOU AGREE TO OUR TERMS OF SERVICE", comment: nil) }

      /// en translation: Back
      ///
      /// Key: Back
      ///
      /// Locales: en, tr
      var back: RswiftResources.StringResource { .init(key: "Back", tableName: "Localizable", source: source, developmentValue: "Back", comment: nil) }

      /// en translation: Bag of Credits
      ///
      /// Key: Bag of Credits
      ///
      /// Locales: en, tr
      var bagOfCredits: RswiftResources.StringResource { .init(key: "Bag of Credits", tableName: "Localizable", source: source, developmentValue: "Bag of Credits", comment: nil) }

      /// en translation: Bank Transfer
      ///
      /// Key: Bank Transfer
      ///
      /// Locales: en, tr
      var bankTransfer: RswiftResources.StringResource { .init(key: "Bank Transfer", tableName: "Localizable", source: source, developmentValue: "Bank Transfer", comment: nil) }

      /// en translation: Birthday
      ///
      /// Key: Birthday
      ///
      /// Locales: en, tr
      var birthday: RswiftResources.StringResource { .init(key: "Birthday", tableName: "Localizable", source: source, developmentValue: "Birthday", comment: nil) }

      /// en translation: Black
      ///
      /// Key: Black
      ///
      /// Locales: en, tr
      var black: RswiftResources.StringResource { .init(key: "Black", tableName: "Localizable", source: source, developmentValue: "Black", comment: nil) }

      /// en translation: Block
      ///
      /// Key: Block
      ///
      /// Locales: en, tr
      var block: RswiftResources.StringResource { .init(key: "Block", tableName: "Localizable", source: source, developmentValue: "Block", comment: nil) }

      /// en translation: Blocked Users
      ///
      /// Key: Blocked Users
      ///
      /// Locales: en, tr
      var blockedUsers: RswiftResources.StringResource { .init(key: "Blocked Users", tableName: "Localizable", source: source, developmentValue: "Blocked Users", comment: nil) }

      /// en translation: Blogs
      ///
      /// Key: Blogs
      ///
      /// Locales: en, tr
      var blogs: RswiftResources.StringResource { .init(key: "Blogs", tableName: "Localizable", source: source, developmentValue: "Blogs", comment: nil) }

      /// en translation: Body
      ///
      /// Key: Body
      ///
      /// Locales: en, tr
      var body: RswiftResources.StringResource { .init(key: "Body", tableName: "Localizable", source: source, developmentValue: "Body", comment: nil) }

      /// en translation: Body Type
      ///
      /// Key: Body Type
      ///
      /// Locales: en, tr
      var bodyType: RswiftResources.StringResource { .init(key: "Body Type", tableName: "Localizable", source: source, developmentValue: "Body Type", comment: nil) }

      /// en translation: Book
      ///
      /// Key: Book
      ///
      /// Locales: en, tr
      var book: RswiftResources.StringResource { .init(key: "Book", tableName: "Localizable", source: source, developmentValue: "Book", comment: nil) }

      /// en translation: Boost Me
      ///
      /// Key: Boost Me
      ///
      /// Locales: en, tr
      var boostMe: RswiftResources.StringResource { .init(key: "Boost Me", tableName: "Localizable", source: source, developmentValue: "Boost Me", comment: nil) }

      /// en translation: Boost your profile
      ///
      /// Key: Boost your profile
      ///
      /// Locales: en, tr
      var boostYourProfile: RswiftResources.StringResource { .init(key: "Boost your profile", tableName: "Localizable", source: source, developmentValue: "Boost your profile", comment: nil) }

      /// en translation: Box of Credits
      ///
      /// Key: Box of Credits
      ///
      /// Locales: en, tr
      var boxOfCredits: RswiftResources.StringResource { .init(key: "Box of Credits", tableName: "Localizable", source: source, developmentValue: "Box of Credits", comment: nil) }

      /// en translation: Browser
      ///
      /// Key: Browser
      ///
      /// Locales: en, tr
      var browser: RswiftResources.StringResource { .init(key: "Browser", tableName: "Localizable", source: source, developmentValue: "Browser", comment: nil) }

      /// en translation: Buy Credit
      ///
      /// Key: Buy Credit
      ///
      /// Locales: en, tr
      var buyCredit: RswiftResources.StringResource { .init(key: "Buy Credit", tableName: "Localizable", source: source, developmentValue: "Buy Credit", comment: nil) }

      /// en translation: By registering you agree to our terms of service
      ///
      /// Key: By registering you agree to our terms of service
      ///
      /// Locales: en, tr
      var byRegisteringYouAgreeToOurTermsOfService: RswiftResources.StringResource { .init(key: "By registering you agree to our terms of service", tableName: "Localizable", source: source, developmentValue: "By registering you agree to our terms of service", comment: nil) }

      /// en translation: CLOSE
      ///
      /// Key: CLOSE
      ///
      /// Locales: en, tr
      var closE: RswiftResources.StringResource { .init(key: "CLOSE", tableName: "Localizable", source: source, developmentValue: "CLOSE", comment: nil) }

      /// en translation: CREATE AN ACCOUNT
      ///
      /// Key: CREATE AN ACCOUNT
      ///
      /// Locales: en, tr
      var createanaccounT: RswiftResources.StringResource { .init(key: "CREATE AN ACCOUNT", tableName: "Localizable", source: source, developmentValue: "CREATE AN ACCOUNT", comment: nil) }

      /// en translation: CVV
      ///
      /// Key: CVV
      ///
      /// Locales: en, tr
      var cvV: RswiftResources.StringResource { .init(key: "CVV", tableName: "Localizable", source: source, developmentValue: "CVV", comment: nil) }

      /// en translation: Calling
      ///
      /// Key: Calling
      ///
      /// Locales: en, tr
      var calling: RswiftResources.StringResource { .init(key: "Calling", tableName: "Localizable", source: source, developmentValue: "Calling", comment: nil) }

      /// en translation: Camera
      ///
      /// Key: Camera
      ///
      /// Locales: en, tr
      var camera: RswiftResources.StringResource { .init(key: "Camera", tableName: "Localizable", source: source, developmentValue: "Camera", comment: nil) }

      /// en translation: Cancel
      ///
      /// Key: Cancel
      ///
      /// Locales: en, tr
      var cancel: RswiftResources.StringResource { .init(key: "Cancel", tableName: "Localizable", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Car
      ///
      /// Key: Car
      ///
      /// Locales: en, tr
      var car: RswiftResources.StringResource { .init(key: "Car", tableName: "Localizable", source: source, developmentValue: "Car", comment: nil) }

      /// en translation: Change Password
      ///
      /// Key: Change Password
      ///
      /// Locales: en, tr
      var changePassword: RswiftResources.StringResource { .init(key: "Change Password", tableName: "Localizable", source: source, developmentValue: "Change Password", comment: nil) }

      /// en translation: Change your password
      ///
      /// Key: Change your password
      ///
      /// Locales: en, tr
      var changeYourPassword: RswiftResources.StringResource { .init(key: "Change your password", tableName: "Localizable", source: source, developmentValue: "Change your password", comment: nil) }

      /// en translation: Character
      ///
      /// Key: Character
      ///
      /// Locales: en, tr
      var character: RswiftResources.StringResource { .init(key: "Character", tableName: "Localizable", source: source, developmentValue: "Character", comment: nil) }

      /// en translation: Chat
      ///
      /// Key: Chat
      ///
      /// Locales: en, tr
      var chat: RswiftResources.StringResource { .init(key: "Chat", tableName: "Localizable", source: source, developmentValue: "Chat", comment: nil) }

      /// en translation: Chats
      ///
      /// Key: Chats
      ///
      /// Locales: en, tr
      var chats: RswiftResources.StringResource { .init(key: "Chats", tableName: "Localizable", source: source, developmentValue: "Chats", comment: nil) }

      /// en translation: Chest of Credits
      ///
      /// Key: Chest of Credits
      ///
      /// Locales: en, tr
      var chestOfCredits: RswiftResources.StringResource { .init(key: "Chest of Credits", tableName: "Localizable", source: source, developmentValue: "Chest of Credits", comment: nil) }

      /// en translation: Children
      ///
      /// Key: Children
      ///
      /// Locales: en, tr
      var children: RswiftResources.StringResource { .init(key: "Children", tableName: "Localizable", source: source, developmentValue: "Children", comment: nil) }

      /// en translation: City
      ///
      /// Key: City
      ///
      /// Locales: en, tr
      var city: RswiftResources.StringResource { .init(key: "City", tableName: "Localizable", source: source, developmentValue: "City", comment: nil) }

      /// en translation: Clear Cache
      ///
      /// Key: Clear Cache
      ///
      /// Locales: en, tr
      var clearCache: RswiftResources.StringResource { .init(key: "Clear Cache", tableName: "Localizable", source: source, developmentValue: "Clear Cache", comment: nil) }

      /// en translation: Clear chat
      ///
      /// Key: Clear chat
      ///
      /// Locales: en, tr
      var clearChat: RswiftResources.StringResource { .init(key: "Clear chat", tableName: "Localizable", source: source, developmentValue: "Clear chat", comment: nil) }

      /// en translation: Color
      ///
      /// Key: Color
      ///
      /// Locales: en, tr
      var color: RswiftResources.StringResource { .init(key: "Color", tableName: "Localizable", source: source, developmentValue: "Color", comment: nil) }

      /// en translation: Confirm
      ///
      /// Key: Confirm
      ///
      /// Locales: en, tr
      var confirm: RswiftResources.StringResource { .init(key: "Confirm", tableName: "Localizable", source: source, developmentValue: "Confirm", comment: nil) }

      /// en translation: Confirm Password
      ///
      /// Key: Confirm Password
      ///
      /// Locales: en, tr
      var confirmPassword: RswiftResources.StringResource { .init(key: "Confirm Password", tableName: "Localizable", source: source, developmentValue: "Confirm Password", comment: nil) }

      /// en translation: Connect
      ///
      /// Key: Connect
      ///
      /// Locales: en, tr
      var connect: RswiftResources.StringResource { .init(key: "Connect", tableName: "Localizable", source: source, developmentValue: "Connect", comment: nil) }

      /// en translation: Connect With Local Singles & Start Your Online Dating Adventure!
      ///
      /// Key: Connect With Local Singles & Start Your Online Dating Adventure!
      ///
      /// Locales: en, tr
      var connectWithLocalSinglesStartYourOnlineDatingAdventure: RswiftResources.StringResource { .init(key: "Connect With Local Singles & Start Your Online Dating Adventure!", tableName: "Localizable", source: source, developmentValue: "Connect With Local Singles & Start Your Online Dating Adventure!", comment: nil) }

      /// en translation: Connect with like minded people and exchange your love
      ///
      /// Key: Connect with like minded people and exchange your love
      ///
      /// Locales: en, tr
      var connectWithLikeMindedPeopleAndExchangeYourLove: RswiftResources.StringResource { .init(key: "Connect with like minded people and exchange your love", tableName: "Localizable", source: source, developmentValue: "Connect with like minded people and exchange your love", comment: nil) }

      /// en translation: Continue
      ///
      /// Key: Continue
      ///
      /// Locales: en, tr
      var `continue`: RswiftResources.StringResource { .init(key: "Continue", tableName: "Localizable", source: source, developmentValue: "Continue", comment: nil) }

      /// en translation: Continue with Facebook
      ///
      /// Key: Continue with Facebook
      ///
      /// Locales: en, tr
      var continueWithFacebook: RswiftResources.StringResource { .init(key: "Continue with Facebook", tableName: "Localizable", source: source, developmentValue: "Continue with Facebook", comment: nil) }

      /// en translation: Copy Link
      ///
      /// Key: Copy Link
      ///
      /// Locales: en, tr
      var copyLink: RswiftResources.StringResource { .init(key: "Copy Link", tableName: "Localizable", source: source, developmentValue: "Copy Link", comment: nil) }

      /// en translation: Copy Profile Link
      ///
      /// Key: Copy Profile Link
      ///
      /// Locales: en, tr
      var copyProfileLink: RswiftResources.StringResource { .init(key: "Copy Profile Link", tableName: "Localizable", source: source, developmentValue: "Copy Profile Link", comment: nil) }

      /// en translation: Copy to clipboard
      ///
      /// Key: Copy to clipboard
      ///
      /// Locales: en, tr
      var copyToClipboard: RswiftResources.StringResource { .init(key: "Copy to clipboard", tableName: "Localizable", source: source, developmentValue: "Copy to clipboard", comment: nil) }

      /// en translation: Could you please try again later?
      ///
      /// Key: Could you please try again later?
      ///
      /// Locales: en, tr
      var couldYouPleaseTryAgainLater: RswiftResources.StringResource { .init(key: "Could you please try again later?", tableName: "Localizable", source: source, developmentValue: "Could you please try again later?", comment: nil) }

      /// en translation: Country
      ///
      /// Key: Country
      ///
      /// Locales: en, tr
      var country: RswiftResources.StringResource { .init(key: "Country", tableName: "Localizable", source: source, developmentValue: "Country", comment: nil) }

      /// en translation: Created an Account Successfully...
      ///
      /// Key: Created an Account Successfully...
      ///
      /// Locales: en, tr
      var createdAnAccountSuccessfully: RswiftResources.StringResource { .init(key: "Created an Account Successfully...", tableName: "Localizable", source: source, developmentValue: "Created an Account Successfully...", comment: nil) }

      /// en translation: Credit Card
      ///
      /// Key: Credit Card
      ///
      /// Locales: en, tr
      var creditCard: RswiftResources.StringResource { .init(key: "Credit Card", tableName: "Localizable", source: source, developmentValue: "Credit Card", comment: nil) }

      /// en translation: CuongLV
      ///
      /// Key: CuongLV
      ///
      /// Locales: en, tr
      var cuongLV: RswiftResources.StringResource { .init(key: "CuongLV", tableName: "Localizable", source: source, developmentValue: "CuongLV", comment: nil) }

      /// en translation: Current Password
      ///
      /// Key: Current Password
      ///
      /// Locales: en, tr
      var currentPassword: RswiftResources.StringResource { .init(key: "Current Password", tableName: "Localizable", source: source, developmentValue: "Current Password", comment: nil) }

      /// en translation: Curvy
      ///
      /// Key: Curvy
      ///
      /// Locales: en, tr
      var curvy: RswiftResources.StringResource { .init(key: "Curvy", tableName: "Localizable", source: source, developmentValue: "Curvy", comment: nil) }

      /// en translation: DON'T HAVE AN ACCOUNT?
      ///
      /// Key: DON'T HAVE AN ACCOUNT?
      ///
      /// Locales: en, tr
      var donthaveanaccounT: RswiftResources.StringResource { .init(key: "DON'T HAVE AN ACCOUNT?", tableName: "Localizable", source: source, developmentValue: "DON'T HAVE AN ACCOUNT?", comment: nil) }

      /// en translation: DarkMode
      ///
      /// Key: DarkMode
      ///
      /// Locales: en, tr
      var darkMode: RswiftResources.StringResource { .init(key: "DarkMode", tableName: "Localizable", source: source, developmentValue: "DarkMode", comment: nil) }

      /// en translation: Default
      ///
      /// Key: Default
      ///
      /// Locales: en, tr
      var `default`: RswiftResources.StringResource { .init(key: "Default", tableName: "Localizable", source: source, developmentValue: "Default", comment: nil) }

      /// en translation: Defualt
      ///
      /// Key: Defualt
      ///
      /// Locales: en, tr
      var defualt: RswiftResources.StringResource { .init(key: "Defualt", tableName: "Localizable", source: source, developmentValue: "Defualt", comment: nil) }

      /// en translation: Disable
      ///
      /// Key: Disable
      ///
      /// Locales: en, tr
      var disable: RswiftResources.StringResource { .init(key: "Disable", tableName: "Localizable", source: source, developmentValue: "Disable", comment: nil) }

      /// en translation: Disconnect
      ///
      /// Key: Disconnect
      ///
      /// Locales: en, tr
      var disconnect: RswiftResources.StringResource { .init(key: "Disconnect", tableName: "Localizable", source: source, developmentValue: "Disconnect", comment: nil) }

      /// en translation: Dish
      ///
      /// Key: Dish
      ///
      /// Locales: en, tr
      var dish: RswiftResources.StringResource { .init(key: "Dish", tableName: "Localizable", source: source, developmentValue: "Dish", comment: nil) }

      /// en translation: Dislike you
      ///
      /// Key: Dislike you
      ///
      /// Locales: en, tr
      var dislikeYou: RswiftResources.StringResource { .init(key: "Dislike you", tableName: "Localizable", source: source, developmentValue: "Dislike you", comment: nil) }

      /// en translation: Display
      ///
      /// Key: Display
      ///
      /// Locales: en, tr
      var display: RswiftResources.StringResource { .init(key: "Display", tableName: "Localizable", source: source, developmentValue: "Display", comment: nil) }

      /// en translation: Display Users i give them a like
      ///
      /// Key: Display Users i give them a like
      ///
      /// Locales: en, tr
      var displayUsersIGiveThemALike: RswiftResources.StringResource { .init(key: "Display Users i give them a like", tableName: "Localizable", source: source, developmentValue: "Display Users i give them a like", comment: nil) }

      /// en translation: Display all your favorite users
      ///
      /// Key: Display all your favorite users
      ///
      /// Locales: en, tr
      var displayAllYourFavoriteUsers: RswiftResources.StringResource { .init(key: "Display all your favorite users", tableName: "Localizable", source: source, developmentValue: "Display all your favorite users", comment: nil) }

      /// en translation: Display all your friend users
      ///
      /// Key: Display all your friend users
      ///
      /// Locales: en, tr
      var displayAllYourFriendUsers: RswiftResources.StringResource { .init(key: "Display all your friend users", tableName: "Localizable", source: source, developmentValue: "Display all your friend users", comment: nil) }

      /// en translation: Display first in find matches
      ///
      /// Key: Display first in find matches
      ///
      /// Locales: en, tr
      var displayFirstInFindMatches: RswiftResources.StringResource { .init(key: "Display first in find matches", tableName: "Localizable", source: source, developmentValue: "Display first in find matches", comment: nil) }

      /// en translation: Display on top in random users
      ///
      /// Key: Display on top in random users
      ///
      /// Locales: en, tr
      var displayOnTopInRandomUsers: RswiftResources.StringResource { .init(key: "Display on top in random users", tableName: "Localizable", source: source, developmentValue: "Display on top in random users", comment: nil) }

      /// en translation: Display users i didn't like
      ///
      /// Key: Display users i didn't like
      ///
      /// Locales: en, tr
      var displayUsersIDidnTLike: RswiftResources.StringResource { .init(key: "Display users i didn't like", tableName: "Localizable", source: source, developmentValue: "Display users i didn't like", comment: nil) }

      /// en translation: Double your chances for a friendship
      ///
      /// Key: Double your chances for a friendship
      ///
      /// Locales: en, tr
      var doubleYourChancesForAFriendship: RswiftResources.StringResource { .init(key: "Double your chances for a friendship", tableName: "Localizable", source: source, developmentValue: "Double your chances for a friendship", comment: nil) }

      /// en translation: Drink
      ///
      /// Key: Drink
      ///
      /// Locales: en, tr
      var drink: RswiftResources.StringResource { .init(key: "Drink", tableName: "Localizable", source: source, developmentValue: "Drink", comment: nil) }

      /// en translation: Earn upto $ for each user your refer to us!
      ///
      /// Key: Earn upto $ for each user your refer to us!
      ///
      /// Locales: en, tr
      var earnUptoForEachUserYourReferToUs: RswiftResources.StringResource { .init(key: "Earn upto $ for each user your refer to us!", tableName: "Localizable", source: source, developmentValue: "Earn upto $ for each user your refer to us!", comment: nil) }

      /// en translation: Edit Profile
      ///
      /// Key: Edit Profile
      ///
      /// Locales: en, tr
      var editProfile: RswiftResources.StringResource { .init(key: "Edit Profile", tableName: "Localizable", source: source, developmentValue: "Edit Profile", comment: nil) }

      /// en translation: Edit Profile Info
      ///
      /// Key: Edit Profile Info
      ///
      /// Locales: en, tr
      var editProfileInfo: RswiftResources.StringResource { .init(key: "Edit Profile Info", tableName: "Localizable", source: source, developmentValue: "Edit Profile Info", comment: nil) }

      /// en translation: Edit looks Info
      ///
      /// Key: Edit looks Info
      ///
      /// Locales: en, tr
      var editLooksInfo: RswiftResources.StringResource { .init(key: "Edit looks Info", tableName: "Localizable", source: source, developmentValue: "Edit looks Info", comment: nil) }

      /// en translation: Education
      ///
      /// Key: Education
      ///
      /// Locales: en, tr
      var education: RswiftResources.StringResource { .init(key: "Education", tableName: "Localizable", source: source, developmentValue: "Education", comment: nil) }

      /// en translation: Education Level
      ///
      /// Key: Education Level
      ///
      /// Locales: en, tr
      var educationLevel: RswiftResources.StringResource { .init(key: "Education Level", tableName: "Localizable", source: source, developmentValue: "Education Level", comment: nil) }

      /// en translation: Email
      ///
      /// Key: Email
      ///
      /// Locales: en, tr
      var email: RswiftResources.StringResource { .init(key: "Email", tableName: "Localizable", source: source, developmentValue: "Email", comment: nil) }

      /// en translation: Email is badly formatted.
      ///
      /// Key: Email is badly formatted.
      ///
      /// Locales: en, tr
      var emailIsBadlyFormatted: RswiftResources.StringResource { .init(key: "Email is badly formatted.", tableName: "Localizable", source: source, developmentValue: "Email is badly formatted.", comment: nil) }

      /// en translation: Empty Email!
      ///
      /// Key: Empty Email!
      ///
      /// Locales: en
      var emptyEmail: RswiftResources.StringResource { .init(key: "Empty Email!", tableName: "Localizable", source: source, developmentValue: "Empty Email!", comment: nil) }

      /// en translation: Empty Password!
      ///
      /// Key: Empty Password!
      ///
      /// Locales: en
      var emptyPassword: RswiftResources.StringResource { .init(key: "Empty Password!", tableName: "Localizable", source: source, developmentValue: "Empty Password!", comment: nil) }

      /// en translation: Enable
      ///
      /// Key: Enable
      ///
      /// Locales: en, tr
      var enable: RswiftResources.StringResource { .init(key: "Enable", tableName: "Localizable", source: source, developmentValue: "Enable", comment: nil) }

      /// en translation: Enter text a tag,then hit,
      ///
      /// Key: Enter text a tag,then hit,
      ///
      /// Locales: en, tr
      var enterTextATagThenHit: RswiftResources.StringResource { .init(key: "Enter text a tag,then hit,", tableName: "Localizable", source: source, developmentValue: "Enter text a tag,then hit,", comment: nil) }

      /// en translation: Enter your card number
      ///
      /// Key: Enter your card number
      ///
      /// Locales: en, tr
      var enterYourCardNumber: RswiftResources.StringResource { .init(key: "Enter your card number", tableName: "Localizable", source: source, developmentValue: "Enter your card number", comment: nil) }

      /// en translation: Ethnicity
      ///
      /// Key: Ethnicity
      ///
      /// Locales: en, tr
      var ethnicity: RswiftResources.StringResource { .init(key: "Ethnicity", tableName: "Localizable", source: source, developmentValue: "Ethnicity", comment: nil) }

      /// en translation: Expire
      ///
      /// Key: Expire
      ///
      /// Locales: en, tr
      var expire: RswiftResources.StringResource { .init(key: "Expire", tableName: "Localizable", source: source, developmentValue: "Expire", comment: nil) }

      /// en translation: Explore Articles
      ///
      /// Key: Explore Articles
      ///
      /// Locales: en, tr
      var exploreArticles: RswiftResources.StringResource { .init(key: "Explore Articles", tableName: "Localizable", source: source, developmentValue: "Explore Articles", comment: nil) }

      /// en translation: FAQ, contact us, privacy
      ///
      /// Key: FAQ, contact us, privacy
      ///
      /// Locales: en, tr
      var faqContactUsPrivacy: RswiftResources.StringResource { .init(key: "FAQ, contact us, privacy", tableName: "Localizable", source: source, developmentValue: "FAQ, contact us, privacy", comment: nil) }

      /// en translation: Facebook
      ///
      /// Key: Facebook
      ///
      /// Locales: en, tr
      var facebook: RswiftResources.StringResource { .init(key: "Facebook", tableName: "Localizable", source: source, developmentValue: "Facebook", comment: nil) }

      /// en translation: Favorite
      ///
      /// Key: Favorite
      ///
      /// Locales: en, tr
      var favorite: RswiftResources.StringResource { .init(key: "Favorite", tableName: "Localizable", source: source, developmentValue: "Favorite", comment: nil) }

      /// en translation: Favorite Info
      ///
      /// Key: Favorite Info
      ///
      /// Locales: en, tr
      var favoriteInfo: RswiftResources.StringResource { .init(key: "Favorite Info", tableName: "Localizable", source: source, developmentValue: "Favorite Info", comment: nil) }

      /// en translation: Favourites
      ///
      /// Key: Favourites
      ///
      /// Locales: en, tr
      var favourites: RswiftResources.StringResource { .init(key: "Favourites", tableName: "Localizable", source: source, developmentValue: "Favourites", comment: nil) }

      /// en translation: Female
      ///
      /// Key: Female
      ///
      /// Locales: en, tr
      var female: RswiftResources.StringResource { .init(key: "Female", tableName: "Localizable", source: source, developmentValue: "Female", comment: nil) }

      /// en translation: Filter
      ///
      /// Key: Filter
      ///
      /// Locales: en, tr
      var filter: RswiftResources.StringResource { .init(key: "Filter", tableName: "Localizable", source: source, developmentValue: "Filter", comment: nil) }

      /// en translation: Find a Match
      ///
      /// Key: Find a Match
      ///
      /// Locales: en, tr
      var findAMatch: RswiftResources.StringResource { .init(key: "Find a Match", tableName: "Localizable", source: source, developmentValue: "Find a Match", comment: nil) }

      /// en translation: First Name
      ///
      /// Key: First Name
      ///
      /// Locales: en, tr
      var firstName: RswiftResources.StringResource { .init(key: "First Name", tableName: "Localizable", source: source, developmentValue: "First Name", comment: nil) }

      /// en translation: Flirt, Chat, and meet people around you.
      ///
      /// Key: Flirt, Chat, and meet people around you.
      ///
      /// Locales: en, tr
      var flirtChatAndMeetPeopleAroundYou: RswiftResources.StringResource { .init(key: "Flirt, Chat, and meet people around you.", tableName: "Localizable", source: source, developmentValue: "Flirt, Chat, and meet people around you.", comment: nil) }

      /// en translation: Forget Password
      ///
      /// Key: Forget Password
      ///
      /// Locales: en, tr
      var forgetPassword: RswiftResources.StringResource { .init(key: "Forget Password", tableName: "Localizable", source: source, developmentValue: "Forget Password", comment: nil) }

      /// en translation: Forgot Password?
      ///
      /// Key: Forgot Password?
      ///
      /// Locales: en, tr
      var forgotPassword: RswiftResources.StringResource { .init(key: "Forgot Password?", tableName: "Localizable", source: source, developmentValue: "Forgot Password?", comment: nil) }

      /// en translation: Friends
      ///
      /// Key: Friends
      ///
      /// Locales: en, tr
      var friends: RswiftResources.StringResource { .init(key: "Friends", tableName: "Localizable", source: source, developmentValue: "Friends", comment: nil) }

      /// en translation: From Height
      ///
      /// Key: From Height
      ///
      /// Locales: en, tr
      var fromHeight: RswiftResources.StringResource { .init(key: "From Height", tableName: "Localizable", source: source, developmentValue: "From Height", comment: nil) }

      /// en translation: Full Name
      ///
      /// Key: Full Name
      ///
      /// Locales: en, tr
      var fullName: RswiftResources.StringResource { .init(key: "Full Name", tableName: "Localizable", source: source, developmentValue: "Full Name", comment: nil) }

      /// en translation: GIRLS
      ///
      /// Key: GIRLS
      ///
      /// Locales: en, tr
      var girlS: RswiftResources.StringResource { .init(key: "GIRLS", tableName: "Localizable", source: source, developmentValue: "GIRLS", comment: nil) }

      /// en translation: Gallery
      ///
      /// Key: Gallery
      ///
      /// Locales: en, tr
      var gallery: RswiftResources.StringResource { .init(key: "Gallery", tableName: "Localizable", source: source, developmentValue: "Gallery", comment: nil) }

      /// en translation: Gender
      ///
      /// Key: Gender
      ///
      /// Locales: en, tr
      var gender: RswiftResources.StringResource { .init(key: "Gender", tableName: "Localizable", source: source, developmentValue: "Gender", comment: nil) }

      /// en translation: General
      ///
      /// Key: General
      ///
      /// Locales: en, tr
      var general: RswiftResources.StringResource { .init(key: "General", tableName: "Localizable", source: source, developmentValue: "General", comment: nil) }

      /// en translation: Get Started
      ///
      /// Key: Get Started
      ///
      /// Locales: en, tr
      var getStarted: RswiftResources.StringResource { .init(key: "Get Started", tableName: "Localizable", source: source, developmentValue: "Get Started", comment: nil) }

      /// en translation: Get additional Stickers
      ///
      /// Key: Get additional Stickers
      ///
      /// Locales: en, tr
      var getAdditionalStickers: RswiftResources.StringResource { .init(key: "Get additional Stickers", tableName: "Localizable", source: source, developmentValue: "Get additional Stickers", comment: nil) }

      /// en translation: Get discount when buy boost me
      ///
      /// Key: Get discount when buy boost me
      ///
      /// Locales: en, tr
      var getDiscountWhenBuyBoostMe: RswiftResources.StringResource { .init(key: "Get discount when buy boost me", tableName: "Localizable", source: source, developmentValue: "Get discount when buy boost me", comment: nil) }

      /// en translation: Get seen 100x in Discover
      ///
      /// Key: Get seen 100x in Discover
      ///
      /// Locales: en, tr
      var getSeen100xInDiscover: RswiftResources.StringResource { .init(key: "Get seen 100x in Discover", tableName: "Localizable", source: source, developmentValue: "Get seen 100x in Discover", comment: nil) }

      /// en translation: Get x10 Visits
      ///
      /// Key: Get x10 Visits
      ///
      /// Locales: en, tr
      var getX10Visits: RswiftResources.StringResource { .init(key: "Get x10 Visits", tableName: "Localizable", source: source, developmentValue: "Get x10 Visits", comment: nil) }

      /// en translation: Get x3 Matches
      ///
      /// Key: Get x3 Matches
      ///
      /// Locales: en, tr
      var getX3Matches: RswiftResources.StringResource { .init(key: "Get x3 Matches", tableName: "Localizable", source: source, developmentValue: "Get x3 Matches", comment: nil) }

      /// en translation: Get x4 Likes
      ///
      /// Key: Get x4 Likes
      ///
      /// Locales: en, tr
      var getX4Likes: RswiftResources.StringResource { .init(key: "Get x4 Likes", tableName: "Localizable", source: source, developmentValue: "Get x4 Likes", comment: nil) }

      /// en translation: Google Plus
      ///
      /// Key: Google Plus
      ///
      /// Locales: en, tr
      var googlePlus: RswiftResources.StringResource { .init(key: "Google Plus", tableName: "Localizable", source: source, developmentValue: "Google Plus", comment: nil) }

      /// en translation: Hair Color
      ///
      /// Key: Hair Color
      ///
      /// Locales: en, tr
      var hairColor: RswiftResources.StringResource { .init(key: "Hair Color", tableName: "Localizable", source: source, developmentValue: "Hair Color", comment: nil) }

      /// en translation: Height
      ///
      /// Key: Height
      ///
      /// Locales: en, tr
      var height: RswiftResources.StringResource { .init(key: "Height", tableName: "Localizable", source: source, developmentValue: "Height", comment: nil) }

      /// en translation: Highlight your messages
      ///
      /// Key: Highlight your messages
      ///
      /// Locales: en, tr
      var highlightYourMessages: RswiftResources.StringResource { .init(key: "Highlight your messages", tableName: "Localizable", source: source, developmentValue: "Highlight your messages", comment: nil) }

      /// en translation: Hobby
      ///
      /// Key: Hobby
      ///
      /// Locales: en, tr
      var hobby: RswiftResources.StringResource { .init(key: "Hobby", tableName: "Localizable", source: source, developmentValue: "Hobby", comment: nil) }

      /// en translation: Distance
      ///
      /// Key: I9L-gX-45v.text
      ///
      /// Locales: en
      var i9LGX45vText: RswiftResources.StringResource { .init(key: "I9L-gX-45v.text", tableName: "Localizable", source: source, developmentValue: "Distance", comment: nil) }

      /// en translation: If you dislike this person and you don't want to keep in touch Swipe Left
      ///
      /// Key: If you dislike this person and you don't want to keep in touch Swipe Left
      ///
      /// Locales: en, tr
      var ifYouDislikeThisPersonAndYouDonTWantToKeepInTouchSwipeLeft: RswiftResources.StringResource { .init(key: "If you dislike this person and you don't want to keep in touch Swipe Left", tableName: "Localizable", source: source, developmentValue: "If you dislike this person and you don't want to keep in touch Swipe Left", comment: nil) }

      /// en translation: If you forgot your password, you can reset it from here.
      ///
      /// Key: If you forgot your password, you can reset it from here.
      ///
      /// Locales: en, tr
      var ifYouForgotYourPasswordYouCanResetItFromHere: RswiftResources.StringResource { .init(key: "If you forgot your password, you can reset it from here.", tableName: "Localizable", source: source, developmentValue: "If you forgot your password, you can reset it from here.", comment: nil) }

      /// en translation: If you like this person and keep in touch, Swipe Right
      ///
      /// Key: If you like this person and keep in touch, Swipe Right
      ///
      /// Locales: en, tr
      var ifYouLikeThisPersonAndKeepInTouchSwipeRight: RswiftResources.StringResource { .init(key: "If you like this person and keep in touch, Swipe Right", tableName: "Localizable", source: source, developmentValue: "If you like this person and keep in touch, Swipe Right", comment: nil) }

      /// en translation: In order to confirm the bank tranfer, you will need to upload a receipt or take a screenshot of your transfer within 1 day from your payment date. If a bank transfer is made but no receipt is uploaded within this period, your order will be cancelled. We will verify and confirm your receipt within 3 working days from the date you upload it.
      ///
      /// Key: In order to confirm the bank tranfer, you will need to upload a receipt or take a screenshot of your transfer within 1 day from your payment date. If a bank transfer is made but no receipt is uploaded within this period, your order will be cancelled. We will verify and confirm your receipt within 3 working days from the date you upload it.
      ///
      /// Locales: en, tr
      var inOrderToConfirmTheBankTranferYouWillNeedToUploadAReceiptOrTakeAScreenshotOfYourTransferWithin1DayFromYourPaymentDateIfABankTransferIsMadeButNoReceiptIsUploadedWithinThisPeriodYourOrderWillBeCancelledWeWillVerifyAndConfirmYourReceiptWithin3WorkingDaysFromTheDateYouUploadIt: RswiftResources.StringResource { .init(key: "In order to confirm the bank tranfer, you will need to upload a receipt or take a screenshot of your transfer within 1 day from your payment date. If a bank transfer is made but no receipt is uploaded within this period, your order will be cancelled. We will verify and confirm your receipt within 3 working days from the date you upload it.", tableName: "Localizable", source: source, developmentValue: "In order to confirm the bank tranfer, you will need to upload a receipt or take a screenshot of your transfer within 1 day from your payment date. If a bank transfer is made but no receipt is uploaded within this period, your order will be cancelled. We will verify and confirm your receipt within 3 working days from the date you upload it.", comment: nil) }

      /// en translation: Instagram
      ///
      /// Key: Instagram
      ///
      /// Locales: en, tr
      var instagram: RswiftResources.StringResource { .init(key: "Instagram", tableName: "Localizable", source: source, developmentValue: "Instagram", comment: nil) }

      /// en translation: Interest
      ///
      /// Key: Interest
      ///
      /// Locales: en, tr
      var interest: RswiftResources.StringResource { .init(key: "Interest", tableName: "Localizable", source: source, developmentValue: "Interest", comment: nil) }

      /// en translation: Interests
      ///
      /// Key: Interests
      ///
      /// Locales: en, tr
      var interests: RswiftResources.StringResource { .init(key: "Interests", tableName: "Localizable", source: source, developmentValue: "Interests", comment: nil) }

      /// en translation: Internet Error
      ///
      /// Key: Internet Error
      ///
      /// Locales: en, tr
      var internetError: RswiftResources.StringResource { .init(key: "Internet Error", tableName: "Localizable", source: source, developmentValue: "Internet Error", comment: nil) }

      /// en translation: Invalid Email!
      ///
      /// Key: Invalid Email!
      ///
      /// Locales: en
      var invalidEmail: RswiftResources.StringResource { .init(key: "Invalid Email!", tableName: "Localizable", source: source, developmentValue: "Invalid Email!", comment: nil) }

      /// en translation: Invite Friends
      ///
      /// Key: Invite Friends
      ///
      /// Locales: en, tr
      var inviteFriends: RswiftResources.StringResource { .init(key: "Invite Friends", tableName: "Localizable", source: source, developmentValue: "Invite Friends", comment: nil) }

      /// en translation: Invite Friends to the app
      ///
      /// Key: Invite Friends to the app
      ///
      /// Locales: en, tr
      var inviteFriendsToTheApp: RswiftResources.StringResource { .init(key: "Invite Friends to the app", tableName: "Localizable", source: source, developmentValue: "Invite Friends to the app", comment: nil) }

      /// en translation: Is now in your friend list
      ///
      /// Key: Is now in your friend list
      ///
      /// Locales: en, tr
      var isNowInYourFriendList: RswiftResources.StringResource { .init(key: "Is now in your friend list", tableName: "Localizable", source: source, developmentValue: "Is now in your friend list", comment: nil) }

      /// en translation: Item
      ///
      /// Key: Item
      ///
      /// Locales: en, tr
      var item: RswiftResources.StringResource { .init(key: "Item", tableName: "Localizable", source: source, developmentValue: "Item", comment: nil) }

      /// en translation: LIFESTYLE
      ///
      /// Key: LIFESTYLE
      ///
      /// Locales: en, tr
      var lifestylE: RswiftResources.StringResource { .init(key: "LIFESTYLE", tableName: "Localizable", source: source, developmentValue: "LIFESTYLE", comment: nil) }

      /// en translation: LOOKS
      ///
      /// Key: LOOKS
      ///
      /// Locales: en, tr
      var lookS: RswiftResources.StringResource { .init(key: "LOOKS", tableName: "Localizable", source: source, developmentValue: "LOOKS", comment: nil) }

      /// en translation: Language
      ///
      /// Key: Language
      ///
      /// Locales: en, tr
      var language: RswiftResources.StringResource { .init(key: "Language", tableName: "Localizable", source: source, developmentValue: "Language", comment: nil) }

      /// en translation: Languages
      ///
      /// Key: Languages
      ///
      /// Locales: en, tr
      var languages: RswiftResources.StringResource { .init(key: "Languages", tableName: "Localizable", source: source, developmentValue: "Languages", comment: nil) }

      /// en translation: Last Name
      ///
      /// Key: Last Name
      ///
      /// Locales: en, tr
      var lastName: RswiftResources.StringResource { .init(key: "Last Name", tableName: "Localizable", source: source, developmentValue: "Last Name", comment: nil) }

      /// en translation: Last seen
      ///
      /// Key: Last seen
      ///
      /// Locales: en, tr
      var lastSeen: RswiftResources.StringResource { .init(key: "Last seen", tableName: "Localizable", source: source, developmentValue: "Last seen", comment: nil) }

      /// en translation: Last seen 2 months ago
      ///
      /// Key: Last seen 2 months ago
      ///
      /// Locales: en, tr
      var lastSeen2MonthsAgo: RswiftResources.StringResource { .init(key: "Last seen 2 months ago", tableName: "Localizable", source: source, developmentValue: "Last seen 2 months ago", comment: nil) }

      /// en translation: Let's Easy
      ///
      /// Key: Let's Easy
      ///
      /// Locales: en, tr
      var letSEasy: RswiftResources.StringResource { .init(key: "Let's Easy", tableName: "Localizable", source: source, developmentValue: "Let's Easy", comment: nil) }

      /// en translation: Life Style Info
      ///
      /// Key: Life Style Info
      ///
      /// Locales: en, tr
      var lifeStyleInfo: RswiftResources.StringResource { .init(key: "Life Style Info", tableName: "Localizable", source: source, developmentValue: "Life Style Info", comment: nil) }

      /// en translation: Lifestyle
      ///
      /// Key: Lifestyle
      ///
      /// Locales: en, tr
      var lifestyle: RswiftResources.StringResource { .init(key: "Lifestyle", tableName: "Localizable", source: source, developmentValue: "Lifestyle", comment: nil) }

      /// en translation: Lifetime
      ///
      /// Key: Lifetime
      ///
      /// Locales: en, tr
      var lifetime: RswiftResources.StringResource { .init(key: "Lifetime", tableName: "Localizable", source: source, developmentValue: "Lifetime", comment: nil) }

      /// en translation: Like you
      ///
      /// Key: Like you
      ///
      /// Locales: en, tr
      var likeYou: RswiftResources.StringResource { .init(key: "Like you", tableName: "Localizable", source: source, developmentValue: "Like you", comment: nil) }

      /// en translation: Likes
      ///
      /// Key: Likes
      ///
      /// Locales: en, tr
      var likes: RswiftResources.StringResource { .init(key: "Likes", tableName: "Localizable", source: source, developmentValue: "Likes", comment: nil) }

      /// en translation: LinkedIn
      ///
      /// Key: LinkedIn
      ///
      /// Locales: en, tr
      var linkedIn: RswiftResources.StringResource { .init(key: "LinkedIn", tableName: "Localizable", source: source, developmentValue: "LinkedIn", comment: nil) }

      /// en translation: Loading...
      ///
      /// Key: Loading...
      ///
      /// Locales: en, tr
      var loading: RswiftResources.StringResource { .init(key: "Loading...", tableName: "Localizable", source: source, developmentValue: "Loading...", comment: nil) }

      /// en translation: Location
      ///
      /// Key: Location
      ///
      /// Locales: en, tr
      var location: RswiftResources.StringResource { .init(key: "Location", tableName: "Localizable", source: source, developmentValue: "Location", comment: nil) }

      /// en translation: Login
      ///
      /// Key: Login
      ///
      /// Locales: en, tr
      var login: RswiftResources.StringResource { .init(key: "Login", tableName: "Localizable", source: source, developmentValue: "Login", comment: nil) }

      /// en translation: Login Successful...
      ///
      /// Key: Login Successful...
      ///
      /// Locales: en, tr
      var loginSuccessful: RswiftResources.StringResource { .init(key: "Login Successful...", tableName: "Localizable", source: source, developmentValue: "Login Successful...", comment: nil) }

      /// en translation: Login with WoWonder
      ///
      /// Key: Login with WoWonder
      ///
      /// Locales: en, tr
      var loginWithWoWonder: RswiftResources.StringResource { .init(key: "Login with WoWonder", tableName: "Localizable", source: source, developmentValue: "Login with WoWonder", comment: nil) }

      /// en translation: Logout
      ///
      /// Key: Logout
      ///
      /// Locales: en, tr
      var logout: RswiftResources.StringResource { .init(key: "Logout", tableName: "Localizable", source: source, developmentValue: "Logout", comment: nil) }

      /// en translation: Looks
      ///
      /// Key: Looks
      ///
      /// Locales: en, tr
      var looks: RswiftResources.StringResource { .init(key: "Looks", tableName: "Localizable", source: source, developmentValue: "Looks", comment: nil) }

      /// en translation: MORE
      ///
      /// Key: MORE
      ///
      /// Locales: en, tr
      var morE: RswiftResources.StringResource { .init(key: "MORE", tableName: "Localizable", source: source, developmentValue: "MORE", comment: nil) }

      /// en translation: MY BALANCE
      ///
      /// Key: MY BALANCE
      ///
      /// Locales: en, tr
      var mybalancE: RswiftResources.StringResource { .init(key: "MY BALANCE", tableName: "Localizable", source: source, developmentValue: "MY BALANCE", comment: nil) }

      /// en translation: Male
      ///
      /// Key: Male
      ///
      /// Locales: en, tr
      var male: RswiftResources.StringResource { .init(key: "Male", tableName: "Localizable", source: source, developmentValue: "Male", comment: nil) }

      /// en translation: Manage Sessions
      ///
      /// Key: Manage Sessions
      ///
      /// Locales: en, tr
      var manageSessions: RswiftResources.StringResource { .init(key: "Manage Sessions", tableName: "Localizable", source: source, developmentValue: "Manage Sessions", comment: nil) }

      /// en translation: Matches
      ///
      /// Key: Matches
      ///
      /// Locales: en, tr
      var matches: RswiftResources.StringResource { .init(key: "Matches", tableName: "Localizable", source: source, developmentValue: "Matches", comment: nil) }

      /// en translation: Max
      ///
      /// Key: Max
      ///
      /// Locales: en, tr
      var max: RswiftResources.StringResource { .init(key: "Max", tableName: "Localizable", source: source, developmentValue: "Max", comment: nil) }

      /// en translation: Messenger
      ///
      /// Key: Messenger
      ///
      /// Locales: en, tr
      var messenger: RswiftResources.StringResource { .init(key: "Messenger", tableName: "Localizable", source: source, developmentValue: "Messenger", comment: nil) }

      /// en translation: Miin
      ///
      /// Key: Miin
      ///
      /// Locales: en, tr
      var miin: RswiftResources.StringResource { .init(key: "Miin", tableName: "Localizable", source: source, developmentValue: "Miin", comment: nil) }

      /// en translation: Monthly
      ///
      /// Key: Monthly
      ///
      /// Locales: en, tr
      var monthly: RswiftResources.StringResource { .init(key: "Monthly", tableName: "Localizable", source: source, developmentValue: "Monthly", comment: nil) }

      /// en translation: Movie
      ///
      /// Key: Movie
      ///
      /// Locales: en, tr
      var movie: RswiftResources.StringResource { .init(key: "Movie", tableName: "Localizable", source: source, developmentValue: "Movie", comment: nil) }

      /// en translation: Music
      ///
      /// Key: Music
      ///
      /// Locales: en, tr
      var music: RswiftResources.StringResource { .init(key: "Music", tableName: "Localizable", source: source, developmentValue: "Music", comment: nil) }

      /// en translation: Music Genre
      ///
      /// Key: Music Genre
      ///
      /// Locales: en, tr
      var musicGenre: RswiftResources.StringResource { .init(key: "Music Genre", tableName: "Localizable", source: source, developmentValue: "Music Genre", comment: nil) }

      /// en translation: Mute
      ///
      /// Key: Mute
      ///
      /// Locales: en, tr
      var mute: RswiftResources.StringResource { .init(key: "Mute", tableName: "Localizable", source: source, developmentValue: "Mute", comment: nil) }

      /// en translation: My Account
      ///
      /// Key: My Account
      ///
      /// Locales: en, tr
      var myAccount: RswiftResources.StringResource { .init(key: "My Account", tableName: "Localizable", source: source, developmentValue: "My Account", comment: nil) }

      /// en translation: My Affliates
      ///
      /// Key: My Affliates
      ///
      /// Locales: en, tr
      var myAffliates: RswiftResources.StringResource { .init(key: "My Affliates", tableName: "Localizable", source: source, developmentValue: "My Affliates", comment: nil) }

      /// en translation: My Profile
      ///
      /// Key: My Profile
      ///
      /// Locales: en, tr
      var myProfile: RswiftResources.StringResource { .init(key: "My Profile", tableName: "Localizable", source: source, developmentValue: "My Profile", comment: nil) }

      /// en translation: NO
      ///
      /// Key: NO
      ///
      /// Locales: en, tr
      var nO: RswiftResources.StringResource { .init(key: "NO", tableName: "Localizable", source: source, developmentValue: "NO", comment: nil) }

      /// en translation: NO, OTHER TIME
      ///
      /// Key: NO, OTHER TIME
      ///
      /// Locales: en, tr
      var noothertimE: RswiftResources.StringResource { .init(key: "NO, OTHER TIME", tableName: "Localizable", source: source, developmentValue: "NO, OTHER TIME", comment: nil) }

      /// en translation: Name
      ///
      /// Key: Name
      ///
      /// Locales: en, tr
      var name: RswiftResources.StringResource { .init(key: "Name", tableName: "Localizable", source: source, developmentValue: "Name", comment: nil) }

      /// en translation: NearBy
      ///
      /// Key: NearBy
      ///
      /// Locales: en, tr
      var nearBy: RswiftResources.StringResource { .init(key: "NearBy", tableName: "Localizable", source: source, developmentValue: "NearBy", comment: nil) }

      /// en translation: New Password
      ///
      /// Key: New Password
      ///
      /// Locales: en, tr
      var newPassword: RswiftResources.StringResource { .init(key: "New Password", tableName: "Localizable", source: source, developmentValue: "New Password", comment: nil) }

      /// en translation: Next
      ///
      /// Key: Next
      ///
      /// Locales: en, tr
      var next: RswiftResources.StringResource { .init(key: "Next", tableName: "Localizable", source: source, developmentValue: "Next", comment: nil) }

      /// en translation: No Internet Available
      ///
      /// Key: No Internet Available
      ///
      /// Locales: en, tr
      var noInternetAvailable: RswiftResources.StringResource { .init(key: "No Internet Available", tableName: "Localizable", source: source, developmentValue: "No Internet Available", comment: nil) }

      /// en translation: No Notifications Yet
      ///
      /// Key: No Notifications Yet
      ///
      /// Locales: en, tr
      var noNotificationsYet: RswiftResources.StringResource { .init(key: "No Notifications Yet", tableName: "Localizable", source: source, developmentValue: "No Notifications Yet", comment: nil) }

      /// en translation: Note:
      ///
      /// Key: Note:
      ///
      /// Locales: en, tr
      var note: RswiftResources.StringResource { .init(key: "Note:", tableName: "Localizable", source: source, developmentValue: "Note:", comment: nil) }

      /// en translation: Notifications
      ///
      /// Key: Notifications
      ///
      /// Locales: en, tr
      var notifications: RswiftResources.StringResource { .init(key: "Notifications", tableName: "Localizable", source: source, developmentValue: "Notifications", comment: nil) }

      /// en translation: OK
      ///
      /// Key: OK
      ///
      /// Locales: en, tr
      var oK: RswiftResources.StringResource { .init(key: "OK", tableName: "Localizable", source: source, developmentValue: "OK", comment: nil) }

      /// en translation: OKAY
      ///
      /// Key: OKAY
      ///
      /// Locales: en, tr
      var okaY: RswiftResources.StringResource { .init(key: "OKAY", tableName: "Localizable", source: source, developmentValue: "OKAY", comment: nil) }

      /// en translation: Online Now
      ///
      /// Key: Online Now
      ///
      /// Locales: en, tr
      var onlineNow: RswiftResources.StringResource { .init(key: "Online Now", tableName: "Localizable", source: source, developmentValue: "Online Now", comment: nil) }

      /// en translation: PRIVACY
      ///
      /// Key: PRIVACY
      ///
      /// Locales: en, tr
      var privacY: RswiftResources.StringResource { .init(key: "PRIVACY", tableName: "Localizable", source: source, developmentValue: "PRIVACY", comment: nil) }

      /// en translation: Passsword
      ///
      /// Key: Passsword
      ///
      /// Locales: en, tr
      var passsword: RswiftResources.StringResource { .init(key: "Passsword", tableName: "Localizable", source: source, developmentValue: "Passsword", comment: nil) }

      /// en translation: Password
      ///
      /// Key: Password
      ///
      /// Locales: en, tr
      var password: RswiftResources.StringResource { .init(key: "Password", tableName: "Localizable", source: source, developmentValue: "Password", comment: nil) }

      /// en translation: Password do not match.
      ///
      /// Key: Password do not match.
      ///
      /// Locales: en, tr
      var passwordDoNotMatch: RswiftResources.StringResource { .init(key: "Password do not match.", tableName: "Localizable", source: source, developmentValue: "Password do not match.", comment: nil) }

      /// en translation: Passwords do not match!
      ///
      /// Key: Passwords do not match!
      ///
      /// Locales: en
      var passwordsDoNotMatch: RswiftResources.StringResource { .init(key: "Passwords do not match!", tableName: "Localizable", source: source, developmentValue: "Passwords do not match!", comment: nil) }

      /// en translation: PayPal E-mail
      ///
      /// Key: PayPal E-mail
      ///
      /// Locales: en, tr
      var payPalEMail: RswiftResources.StringResource { .init(key: "PayPal E-mail", tableName: "Localizable", source: source, developmentValue: "PayPal E-mail", comment: nil) }

      /// en translation: Paypal
      ///
      /// Key: Paypal
      ///
      /// Locales: en, tr
      var paypal: RswiftResources.StringResource { .init(key: "Paypal", tableName: "Localizable", source: source, developmentValue: "Paypal", comment: nil) }

      /// en translation: People i Liked
      ///
      /// Key: People i Liked
      ///
      /// Locales: en, tr
      var peopleILiked: RswiftResources.StringResource { .init(key: "People i Liked", tableName: "Localizable", source: source, developmentValue: "People i Liked", comment: nil) }

      /// en translation: Personality
      ///
      /// Key: Personality
      ///
      /// Locales: en, tr
      var personality: RswiftResources.StringResource { .init(key: "Personality", tableName: "Localizable", source: source, developmentValue: "Personality", comment: nil) }

      /// en translation: Personality Info
      ///
      /// Key: Personality Info
      ///
      /// Locales: en, tr
      var personalityInfo: RswiftResources.StringResource { .init(key: "Personality Info", tableName: "Localizable", source: source, developmentValue: "Personality Info", comment: nil) }

      /// en translation: Pet
      ///
      /// Key: Pet
      ///
      /// Locales: en, tr
      var pet: RswiftResources.StringResource { .init(key: "Pet", tableName: "Localizable", source: source, developmentValue: "Pet", comment: nil) }

      /// en translation: Pets
      ///
      /// Key: Pets
      ///
      /// Locales: en, tr
      var pets: RswiftResources.StringResource { .init(key: "Pets", tableName: "Localizable", source: source, developmentValue: "Pets", comment: nil) }

      /// en translation: Phone
      ///
      /// Key: Phone
      ///
      /// Locales: en, tr
      var phone: RswiftResources.StringResource { .init(key: "Phone", tableName: "Localizable", source: source, developmentValue: "Phone", comment: nil) }

      /// en translation: Phone Number
      ///
      /// Key: Phone Number
      ///
      /// Locales: en, tr
      var phoneNumber: RswiftResources.StringResource { .init(key: "Phone Number", tableName: "Localizable", source: source, developmentValue: "Phone Number", comment: nil) }

      /// en translation: Please enter Code
      ///
      /// Key: Please enter Code
      ///
      /// Locales: en
      var pleaseEnterCode: RswiftResources.StringResource { .init(key: "Please enter Code", tableName: "Localizable", source: source, developmentValue: "Please enter Code", comment: nil) }

      /// en translation: Please enter Current Password.
      ///
      /// Key: Please enter Current Password.
      ///
      /// Locales: en, tr
      var pleaseEnterCurrentPassword: RswiftResources.StringResource { .init(key: "Please enter Current Password.", tableName: "Localizable", source: source, developmentValue: "Please enter Current Password.", comment: nil) }

      /// en translation: Please enter New Password.
      ///
      /// Key: Please enter New Password.
      ///
      /// Locales: en, tr
      var pleaseEnterNewPassword: RswiftResources.StringResource { .init(key: "Please enter New Password.", tableName: "Localizable", source: source, developmentValue: "Please enter New Password.", comment: nil) }

      /// en translation: Please enter Repeat Password.
      ///
      /// Key: Please enter Repeat Password.
      ///
      /// Locales: en, tr
      var pleaseEnterRepeatPassword: RswiftResources.StringResource { .init(key: "Please enter Repeat Password.", tableName: "Localizable", source: source, developmentValue: "Please enter Repeat Password.", comment: nil) }

      /// en translation: Please enter amount.
      ///
      /// Key: Please enter amount.
      ///
      /// Locales: en, tr
      var pleaseEnterAmount: RswiftResources.StringResource { .init(key: "Please enter amount.", tableName: "Localizable", source: source, developmentValue: "Please enter amount.", comment: nil) }

      /// en translation: Please enter confirm password.
      ///
      /// Key: Please enter confirm password.
      ///
      /// Locales: en, tr
      var pleaseEnterConfirmPassword: RswiftResources.StringResource { .init(key: "Please enter confirm password.", tableName: "Localizable", source: source, developmentValue: "Please enter confirm password.", comment: nil) }

      /// en translation: Please enter first name.
      ///
      /// Key: Please enter first name.
      ///
      /// Locales: en, tr
      var pleaseEnterFirstName: RswiftResources.StringResource { .init(key: "Please enter first name.", tableName: "Localizable", source: source, developmentValue: "Please enter first name.", comment: nil) }

      /// en translation: Please enter last name.
      ///
      /// Key: Please enter last name.
      ///
      /// Locales: en, tr
      var pleaseEnterLastName: RswiftResources.StringResource { .init(key: "Please enter last name.", tableName: "Localizable", source: source, developmentValue: "Please enter last name.", comment: nil) }

      /// en translation: Please enter password.
      ///
      /// Key: Please enter password.
      ///
      /// Locales: en, tr
      var pleaseEnterPassword: RswiftResources.StringResource { .init(key: "Please enter password.", tableName: "Localizable", source: source, developmentValue: "Please enter password.", comment: nil) }

      /// en translation: Please enter username.
      ///
      /// Key: Please enter username.
      ///
      /// Locales: en, tr
      var pleaseEnterUsername: RswiftResources.StringResource { .init(key: "Please enter username.", tableName: "Localizable", source: source, developmentValue: "Please enter username.", comment: nil) }

      /// en translation: Please enter your email address. We will send you a link to reset password.
      ///
      /// Key: Please enter your email address. We will send you a link to reset password.
      ///
      /// Locales: en, tr
      var pleaseEnterYourEmailAddressWeWillSendYouALinkToResetPassword: RswiftResources.StringResource { .init(key: "Please enter your email address. We will send you a link to reset password.", tableName: "Localizable", source: source, developmentValue: "Please enter your email address. We will send you a link to reset password.", comment: nil) }

      /// en translation: Please enter your mobile number to receive a verification code. Carrier rates may apply
      ///
      /// Key: Please enter your mobile number to receive a verification code. Carrier rates may apply
      ///
      /// Locales: en, tr
      var pleaseEnterYourMobileNumberToReceiveAVerificationCodeCarrierRatesMayApply: RswiftResources.StringResource { .init(key: "Please enter your mobile number to receive a verification code. Carrier rates may apply", tableName: "Localizable", source: source, developmentValue: "Please enter your mobile number to receive a verification code. Carrier rates may apply", comment: nil) }

      /// en translation: Please transfer the amount of $8 to this bank account to purchase Weekly Plan Premium Membership
      ///
      /// Key: Please transfer the amount of $8 to this bank account to purchase Weekly Plan Premium Membership
      ///
      /// Locales: en, tr
      var pleaseTransferTheAmountOf8ToThisBankAccountToPurchaseWeeklyPlanPremiumMembership: RswiftResources.StringResource { .init(key: "Please transfer the amount of $8 to this bank account to purchase Weekly Plan Premium Membership", tableName: "Localizable", source: source, developmentValue: "Please transfer the amount of $8 to this bank account to purchase Weekly Plan Premium Membership", comment: nil) }

      /// en translation: Please type email of account you want to recover. You will get 4-digits recovery code
      ///
      /// Key: Please type email of account you want to recover. You will get 4-digits recovery code
      ///
      /// Locales: en, tr
      var pleaseTypeEmailOfAccountYouWantToRecoverYouWillGet4DigitsRecoveryCode: RswiftResources.StringResource { .init(key: "Please type email of account you want to recover. You will get 4-digits recovery code", tableName: "Localizable", source: source, developmentValue: "Please type email of account you want to recover. You will get 4-digits recovery code", comment: nil) }

      /// en translation: Preferred Language
      ///
      /// Key: Preferred Language
      ///
      /// Locales: en, tr
      var preferredLanguage: RswiftResources.StringResource { .init(key: "Preferred Language", tableName: "Localizable", source: source, developmentValue: "Preferred Language", comment: nil) }

      /// en translation: Privacy
      ///
      /// Key: Privacy
      ///
      /// Locales: en, tr
      var privacy: RswiftResources.StringResource { .init(key: "Privacy", tableName: "Localizable", source: source, developmentValue: "Privacy", comment: nil) }

      /// en translation: Pro Users
      ///
      /// Key: Pro Users
      ///
      /// Locales: en, tr
      var proUsers: RswiftResources.StringResource { .init(key: "Pro Users", tableName: "Localizable", source: source, developmentValue: "Pro Users", comment: nil) }

      /// en translation: Profile Completed
      ///
      /// Key: Profile Completed
      ///
      /// Locales: en, tr
      var profileCompleted: RswiftResources.StringResource { .init(key: "Profile Completed", tableName: "Localizable", source: source, developmentValue: "Profile Completed", comment: nil) }

      /// en translation: Profile Info
      ///
      /// Key: Profile Info
      ///
      /// Locales: en, tr
      var profileInfo: RswiftResources.StringResource { .init(key: "Profile Info", tableName: "Localizable", source: source, developmentValue: "Profile Info", comment: nil) }

      /// en translation: Promote your profile by get more visits, for 5 minutes
      ///
      /// Key: Promote your profile by get more visits, for 5 minutes
      ///
      /// Locales: en, tr
      var promoteYourProfileByGetMoreVisitsFor5Minutes: RswiftResources.StringResource { .init(key: "Promote your profile by get more visits, for 5 minutes", tableName: "Localizable", source: source, developmentValue: "Promote your profile by get more visits, for 5 minutes", comment: nil) }

      /// en translation: Put your self First in Search
      ///
      /// Key: Put your self First in Search
      ///
      /// Locales: en, tr
      var putYourSelfFirstInSearch: RswiftResources.StringResource { .init(key: "Put your self First in Search", tableName: "Localizable", source: source, developmentValue: "Put your self First in Search", comment: nil) }

      /// en translation: QuickDate
      ///
      /// Key: QuickDate
      ///
      /// Locales: en, tr
      var quickDate: RswiftResources.StringResource { .init(key: "QuickDate", tableName: "Localizable", source: source, developmentValue: "QuickDate", comment: nil) }

      /// en translation: REGISTER
      ///
      /// Key: REGISTER
      ///
      /// Locales: en, tr
      var registeR: RswiftResources.StringResource { .init(key: "REGISTER", tableName: "Localizable", source: source, developmentValue: "REGISTER", comment: nil) }

      /// en translation: REMOVE ACCOUNT
      ///
      /// Key: REMOVE ACCOUNT
      ///
      /// Locales: en, tr
      var removeaccounT: RswiftResources.StringResource { .init(key: "REMOVE ACCOUNT", tableName: "Localizable", source: source, developmentValue: "REMOVE ACCOUNT", comment: nil) }

      /// en translation: RESET FILTERS
      ///
      /// Key: RESET FILTERS
      ///
      /// Locales: en, tr
      var resetfilterS: RswiftResources.StringResource { .init(key: "RESET FILTERS", tableName: "Localizable", source: source, developmentValue: "RESET FILTERS", comment: nil) }

      /// en translation: Read the latest Articles
      ///
      /// Key: Read the latest Articles
      ///
      /// Locales: en, tr
      var readTheLatestArticles: RswiftResources.StringResource { .init(key: "Read the latest Articles", tableName: "Localizable", source: source, developmentValue: "Read the latest Articles", comment: nil) }

      /// en translation: Register
      ///
      /// Key: Register
      ///
      /// Locales: en, tr
      var register: RswiftResources.StringResource { .init(key: "Register", tableName: "Localizable", source: source, developmentValue: "Register", comment: nil) }

      /// en translation: Relationship
      ///
      /// Key: Relationship
      ///
      /// Locales: en, tr
      var relationship: RswiftResources.StringResource { .init(key: "Relationship", tableName: "Localizable", source: source, developmentValue: "Relationship", comment: nil) }

      /// en translation: Relationship Status
      ///
      /// Key: Relationship Status
      ///
      /// Locales: en, tr
      var relationshipStatus: RswiftResources.StringResource { .init(key: "Relationship Status", tableName: "Localizable", source: source, developmentValue: "Relationship Status", comment: nil) }

      /// en translation: Religion
      ///
      /// Key: Religion
      ///
      /// Locales: en, tr
      var religion: RswiftResources.StringResource { .init(key: "Religion", tableName: "Localizable", source: source, developmentValue: "Religion", comment: nil) }

      /// en translation: Repeat Password
      ///
      /// Key: Repeat Password
      ///
      /// Locales: en, tr
      var repeatPassword: RswiftResources.StringResource { .init(key: "Repeat Password", tableName: "Localizable", source: source, developmentValue: "Repeat Password", comment: nil) }

      /// en translation: Report
      ///
      /// Key: Report
      ///
      /// Locales: en, tr
      var report: RswiftResources.StringResource { .init(key: "Report", tableName: "Localizable", source: source, developmentValue: "Report", comment: nil) }

      /// en translation: Request
      ///
      /// Key: Request
      ///
      /// Locales: en, tr
      var request: RswiftResources.StringResource { .init(key: "Request", tableName: "Localizable", source: source, developmentValue: "Request", comment: nil) }

      /// en translation: Requested to be a friend with you
      ///
      /// Key: Requested to be a friend with you
      ///
      /// Locales: en, tr
      var requestedToBeAFriendWithYou: RswiftResources.StringResource { .init(key: "Requested to be a friend with you", tableName: "Localizable", source: source, developmentValue: "Requested to be a friend with you", comment: nil) }

      /// en translation: Room name 
      ///
      /// Key: Room name 
      ///
      /// Locales: en, tr
      var roomName: RswiftResources.StringResource { .init(key: "Room name ", tableName: "Localizable", source: source, developmentValue: "Room name ", comment: nil) }

      /// en translation: Room:
      ///
      /// Key: Room:
      ///
      /// Locales: en, tr
      var room: RswiftResources.StringResource { .init(key: "Room:", tableName: "Localizable", source: source, developmentValue: "Room:", comment: nil) }

      /// en translation: Routing code
      ///
      /// Key: Routing code
      ///
      /// Locales: en, tr
      var routingCode: RswiftResources.StringResource { .init(key: "Routing code", tableName: "Localizable", source: source, developmentValue: "Routing code", comment: nil) }

      /// en translation: SAVE
      ///
      /// Key: SAVE
      ///
      /// Locales: en, tr
      var savE: RswiftResources.StringResource { .init(key: "SAVE", tableName: "Localizable", source: source, developmentValue: "SAVE", comment: nil) }

      /// en translation: SAVE PASSWORD
      ///
      /// Key: SAVE PASSWORD
      ///
      /// Locales: en, tr
      var savepassworD: RswiftResources.StringResource { .init(key: "SAVE PASSWORD", tableName: "Localizable", source: source, developmentValue: "SAVE PASSWORD", comment: nil) }

      /// en translation: SIGN IN
      ///
      /// Key: SIGN IN
      ///
      /// Locales: en, tr
      var signiN: RswiftResources.StringResource { .init(key: "SIGN IN", tableName: "Localizable", source: source, developmentValue: "SIGN IN", comment: nil) }

      /// en translation: Save
      ///
      /// Key: Save
      ///
      /// Locales: en, tr
      var save: RswiftResources.StringResource { .init(key: "Save", tableName: "Localizable", source: source, developmentValue: "Save", comment: nil) }

      /// en translation: Search Nearby
      ///
      /// Key: Search Nearby
      ///
      /// Locales: en, tr
      var searchNearby: RswiftResources.StringResource { .init(key: "Search Nearby", tableName: "Localizable", source: source, developmentValue: "Search Nearby", comment: nil) }

      /// en translation: Security
      ///
      /// Key: Security
      ///
      /// Locales: en, tr
      var security: RswiftResources.StringResource { .init(key: "Security", tableName: "Localizable", source: source, developmentValue: "Security", comment: nil) }

      /// en translation: See like notifications
      ///
      /// Key: See like notifications
      ///
      /// Locales: en, tr
      var seeLikeNotifications: RswiftResources.StringResource { .init(key: "See like notifications", tableName: "Localizable", source: source, developmentValue: "See like notifications", comment: nil) }

      /// en translation: See more stickers on chat
      ///
      /// Key: See more stickers on chat
      ///
      /// Locales: en, tr
      var seeMoreStickersOnChat: RswiftResources.StringResource { .init(key: "See more stickers on chat", tableName: "Localizable", source: source, developmentValue: "See more stickers on chat", comment: nil) }

      /// en translation: Select Payment
      ///
      /// Key: Select Payment
      ///
      /// Locales: en, tr
      var selectPayment: RswiftResources.StringResource { .init(key: "Select Payment", tableName: "Localizable", source: source, developmentValue: "Select Payment", comment: nil) }

      /// en translation: Select Picture
      ///
      /// Key: Select Picture
      ///
      /// Locales: en, tr
      var selectPicture: RswiftResources.StringResource { .init(key: "Select Picture", tableName: "Localizable", source: source, developmentValue: "Select Picture", comment: nil) }

      /// en translation: Select Source
      ///
      /// Key: Select Source
      ///
      /// Locales: en, tr
      var selectSource: RswiftResources.StringResource { .init(key: "Select Source", tableName: "Localizable", source: source, developmentValue: "Select Source", comment: nil) }

      /// en translation: Send
      ///
      /// Key: Send
      ///
      /// Locales: en, tr
      var send: RswiftResources.StringResource { .init(key: "Send", tableName: "Localizable", source: source, developmentValue: "Send", comment: nil) }

      /// en translation: Session
      ///
      /// Key: Session
      ///
      /// Locales: en, tr
      var session: RswiftResources.StringResource { .init(key: "Session", tableName: "Localizable", source: source, developmentValue: "Session", comment: nil) }

      /// en translation: Settings
      ///
      /// Key: Settings
      ///
      /// Locales: en, tr
      var settings: RswiftResources.StringResource { .init(key: "Settings", tableName: "Localizable", source: source, developmentValue: "Settings", comment: nil) }

      /// en translation: Share
      ///
      /// Key: Share
      ///
      /// Locales: en, tr
      var share: RswiftResources.StringResource { .init(key: "Share", tableName: "Localizable", source: source, developmentValue: "Share", comment: nil) }

      /// en translation: Share it by inviting your friends using these
      ///
      /// Key: Share it by inviting your friends using these
      ///
      /// Locales: en, tr
      var shareItByInvitingYourFriendsUsingThese: RswiftResources.StringResource { .init(key: "Share it by inviting your friends using these", tableName: "Localizable", source: source, developmentValue: "Share it by inviting your friends using these", comment: nil) }

      /// en translation: Share to
      ///
      /// Key: Share to
      ///
      /// Locales: en, tr
      var shareTo: RswiftResources.StringResource { .init(key: "Share to", tableName: "Localizable", source: source, developmentValue: "Share to", comment: nil) }

      /// en translation: Short Password!
      ///
      /// Key: Short Password!
      ///
      /// Locales: en
      var shortPassword: RswiftResources.StringResource { .init(key: "Short Password!", tableName: "Localizable", source: source, developmentValue: "Short Password!", comment: nil) }

      /// en translation: Show in Premium bar
      ///
      /// Key: Show in Premium bar
      ///
      /// Locales: en, tr
      var showInPremiumBar: RswiftResources.StringResource { .init(key: "Show in Premium bar", tableName: "Localizable", source: source, developmentValue: "Show in Premium bar", comment: nil) }

      /// en translation: Show more and rise up at the same time, for 4 minutes
      ///
      /// Key: Show more and rise up at the same time, for 4 minutes
      ///
      /// Locales: en, tr
      var showMoreAndRiseUpAtTheSameTimeFor4Minutes: RswiftResources.StringResource { .init(key: "Show more and rise up at the same time, for 4 minutes", tableName: "Localizable", source: source, developmentValue: "Show more and rise up at the same time, for 4 minutes", comment: nil) }

      /// en translation: Show my profile in find match page?
      ///
      /// Key: Show my profile in find match page?
      ///
      /// Locales: en, tr
      var showMyProfileInFindMatchPage: RswiftResources.StringResource { .init(key: "Show my profile in find match page?", tableName: "Localizable", source: source, developmentValue: "Show my profile in find match page?", comment: nil) }

      /// en translation: Show my profile in random users?
      ///
      /// Key: Show my profile in random users?
      ///
      /// Locales: en, tr
      var showMyProfileInRandomUsers: RswiftResources.StringResource { .init(key: "Show my profile in random users?", tableName: "Localizable", source: source, developmentValue: "Show my profile in random users?", comment: nil) }

      /// en translation: Show my profile on search engines?
      ///
      /// Key: Show my profile on search engines?
      ///
      /// Locales: en, tr
      var showMyProfileOnSearchEngines: RswiftResources.StringResource { .init(key: "Show my profile on search engines?", tableName: "Localizable", source: source, developmentValue: "Show my profile on search engines?", comment: nil) }

      /// en translation: Show when you're active
      ///
      /// Key: Show when you're active
      ///
      /// Locales: en, tr
      var showWhenYouReActive: RswiftResources.StringResource { .init(key: "Show when you're active", tableName: "Localizable", source: source, developmentValue: "Show when you're active", comment: nil) }

      /// en translation: Sign In with Google
      ///
      /// Key: Sign In with Google
      ///
      /// Locales: en, tr
      var signInWithGoogle: RswiftResources.StringResource { .init(key: "Sign In with Google", tableName: "Localizable", source: source, developmentValue: "Sign In with Google", comment: nil) }

      /// en translation: Sign in with Apple
      ///
      /// Key: Sign in with Apple
      ///
      /// Locales: en, tr
      var signInWithApple: RswiftResources.StringResource { .init(key: "Sign in with Apple", tableName: "Localizable", source: source, developmentValue: "Sign in with Apple", comment: nil) }

      /// en translation: Skip
      ///
      /// Key: Skip
      ///
      /// Locales: en, tr
      var skip: RswiftResources.StringResource { .init(key: "Skip", tableName: "Localizable", source: source, developmentValue: "Skip", comment: nil) }

      /// en translation: Skip Credit
      ///
      /// Key: Skip Credit
      ///
      /// Locales: en, tr
      var skipCredit: RswiftResources.StringResource { .init(key: "Skip Credit", tableName: "Localizable", source: source, developmentValue: "Skip Credit", comment: nil) }

      /// en translation: Skip Premium
      ///
      /// Key: Skip Premium
      ///
      /// Locales: en, tr
      var skipPremium: RswiftResources.StringResource { .init(key: "Skip Premium", tableName: "Localizable", source: source, developmentValue: "Skip Premium", comment: nil) }

      /// en translation: Skip Tutorial
      ///
      /// Key: Skip Tutorial
      ///
      /// Locales: en, tr
      var skipTutorial: RswiftResources.StringResource { .init(key: "Skip Tutorial", tableName: "Localizable", source: source, developmentValue: "Skip Tutorial", comment: nil) }

      /// en translation: Slim
      ///
      /// Key: Slim
      ///
      /// Locales: en, tr
      var slim: RswiftResources.StringResource { .init(key: "Slim", tableName: "Localizable", source: source, developmentValue: "Slim", comment: nil) }

      /// en translation: Smoke
      ///
      /// Key: Smoke
      ///
      /// Locales: en, tr
      var smoke: RswiftResources.StringResource { .init(key: "Smoke", tableName: "Localizable", source: source, developmentValue: "Smoke", comment: nil) }

      /// en translation: Social Links
      ///
      /// Key: Social Links
      ///
      /// Locales: en, tr
      var socialLinks: RswiftResources.StringResource { .init(key: "Social Links", tableName: "Localizable", source: source, developmentValue: "Social Links", comment: nil) }

      /// en translation: Social Media Invite
      ///
      /// Key: Social Media Invite
      ///
      /// Locales: en, tr
      var socialMediaInvite: RswiftResources.StringResource { .init(key: "Social Media Invite", tableName: "Localizable", source: source, developmentValue: "Social Media Invite", comment: nil) }

      /// en translation: Something Wrong
      ///
      /// Key: Something Wrong
      ///
      /// Locales: en, tr
      var somethingWrong: RswiftResources.StringResource { .init(key: "Something Wrong", tableName: "Localizable", source: source, developmentValue: "Something Wrong", comment: nil) }

      /// en translation: Song
      ///
      /// Key: Song
      ///
      /// Locales: en, tr
      var song: RswiftResources.StringResource { .init(key: "Song", tableName: "Localizable", source: source, developmentValue: "Song", comment: nil) }

      /// en translation: Sport
      ///
      /// Key: Sport
      ///
      /// Locales: en, tr
      var sport: RswiftResources.StringResource { .init(key: "Sport", tableName: "Localizable", source: source, developmentValue: "Sport", comment: nil) }

      /// en translation: Storage
      ///
      /// Key: Storage
      ///
      /// Locales: en, tr
      var storage: RswiftResources.StringResource { .init(key: "Storage", tableName: "Localizable", source: source, developmentValue: "Storage", comment: nil) }

      /// en translation: Submit
      ///
      /// Key: Submit
      ///
      /// Locales: en, tr
      var submit: RswiftResources.StringResource { .init(key: "Submit", tableName: "Localizable", source: source, developmentValue: "Submit", comment: nil) }

      /// en translation: Success
      ///
      /// Key: Success
      ///
      /// Locales: en, tr
      var success: RswiftResources.StringResource { .init(key: "Success", tableName: "Localizable", source: source, developmentValue: "Success", comment: nil) }

      /// en translation: Support
      ///
      /// Key: Support
      ///
      /// Locales: en, tr
      var support: RswiftResources.StringResource { .init(key: "Support", tableName: "Localizable", source: source, developmentValue: "Support", comment: nil) }

      /// en translation: Swipe Cards
      ///
      /// Key: Swipe Cards
      ///
      /// Locales: en, tr
      var swipeCards: RswiftResources.StringResource { .init(key: "Swipe Cards", tableName: "Localizable", source: source, developmentValue: "Swipe Cards", comment: nil) }

      /// en translation: Swipe cards right and left if you like or dislike someone
      ///
      /// Key: Swipe cards right and left if you like or dislike someone
      ///
      /// Locales: en, tr
      var swipeCardsRightAndLeftIfYouLikeOrDislikeSomeone: RswiftResources.StringResource { .init(key: "Swipe cards right and left if you like or dislike someone", tableName: "Localizable", source: source, developmentValue: "Swipe cards right and left if you like or dislike someone", comment: nil) }

      /// en translation: Swipe right to like someone and if you both like each other? Its a match.
      ///
      /// Key: Swipe right to like someone and if you both like each other? Its a match.
      ///
      /// Locales: en, tr
      var swipeRightToLikeSomeoneAndIfYouBothLikeEachOtherItsAMatch: RswiftResources.StringResource { .init(key: "Swipe right to like someone and if you both like each other? Its a match.", tableName: "Localizable", source: source, developmentValue: "Swipe right to like someone and if you both like each other? Its a match.", comment: nil) }

      /// en translation: TERMS OF SERVICE
      ///
      /// Key: TERMS OF SERVICE
      ///
      /// Locales: en, tr
      var termsofservicE: RswiftResources.StringResource { .init(key: "TERMS OF SERVICE", tableName: "Localizable", source: source, developmentValue: "TERMS OF SERVICE", comment: nil) }

      /// en translation: TGBATRISXXX
      ///
      /// Key: TGBATRISXXX
      ///
      /// Locales: en, tr
      var tgbatrisxxX: RswiftResources.StringResource { .init(key: "TGBATRISXXX", tableName: "Localizable", source: source, developmentValue: "TGBATRISXXX", comment: nil) }

      /// en translation: Tell everyone you're online and be seen by users who want to chat, for 5 minutes
      ///
      /// Key: Tell everyone you're online and be seen by users who want to chat, for 5 minutes
      ///
      /// Locales: en, tr
      var tellEveryoneYouReOnlineAndBeSeenByUsersWhoWantToChatFor5Minutes: RswiftResources.StringResource { .init(key: "Tell everyone you're online and be seen by users who want to chat, for 5 minutes", tableName: "Localizable", source: source, developmentValue: "Tell everyone you're online and be seen by users who want to chat, for 5 minutes", comment: nil) }

      /// en translation: Terms and conditions
      ///
      /// Key: Terms and conditions
      ///
      /// Locales: en, tr
      var termsAndConditions: RswiftResources.StringResource { .init(key: "Terms and conditions", tableName: "Localizable", source: source, developmentValue: "Terms and conditions", comment: nil) }

      /// en translation: The Apple Pay transaction was complete.
      ///
      /// Key: The Apple Pay transaction was complete.
      ///
      /// Locales: en, tr
      var theApplePayTransactionWasComplete: RswiftResources.StringResource { .init(key: "The Apple Pay transaction was complete.", tableName: "Localizable", source: source, developmentValue: "The Apple Pay transaction was complete.", comment: nil) }

      /// en translation: The RazorPay transaction was complete.
      ///
      /// Key: The RazorPay transaction was complete.
      ///
      /// Locales: en, tr
      var theRazorPayTransactionWasComplete: RswiftResources.StringResource { .init(key: "The RazorPay transaction was complete.", tableName: "Localizable", source: source, developmentValue: "The RazorPay transaction was complete.", comment: nil) }

      /// en translation: Theme
      ///
      /// Key: Theme
      ///
      /// Locales: en, tr
      var theme: RswiftResources.StringResource { .init(key: "Theme", tableName: "Localizable", source: source, developmentValue: "Theme", comment: nil) }

      /// en translation: There are no messages
      ///
      /// Key: There are no messages
      ///
      /// Locales: en, tr
      var thereAreNoMessages: RswiftResources.StringResource { .init(key: "There are no messages", tableName: "Localizable", source: source, developmentValue: "There are no messages", comment: nil) }

      /// en translation: There is no Blocked User
      ///
      /// Key: There is no Blocked User
      ///
      /// Locales: en, tr
      var thereIsNoBlockedUser: RswiftResources.StringResource { .init(key: "There is no Blocked User", tableName: "Localizable", source: source, developmentValue: "There is no Blocked User", comment: nil) }

      /// en translation: There is no Disliked User
      ///
      /// Key: There is no Disliked User
      ///
      /// Locales: en, tr
      var thereIsNoDislikedUser: RswiftResources.StringResource { .init(key: "There is no Disliked User", tableName: "Localizable", source: source, developmentValue: "There is no Disliked User", comment: nil) }

      /// en translation: There is no Favourite User
      ///
      /// Key: There is no Favourite User
      ///
      /// Locales: en, tr
      var thereIsNoFavouriteUser: RswiftResources.StringResource { .init(key: "There is no Favourite User", tableName: "Localizable", source: source, developmentValue: "There is no Favourite User", comment: nil) }

      /// en translation: There is no data to show
      ///
      /// Key: There is no data to show
      ///
      /// Locales: en, tr
      var thereIsNoDataToShow: RswiftResources.StringResource { .init(key: "There is no data to show", tableName: "Localizable", source: source, developmentValue: "There is no data to show", comment: nil) }

      /// en translation: There is no liked User
      ///
      /// Key: There is no liked User
      ///
      /// Locales: en, tr
      var thereIsNoLikedUser: RswiftResources.StringResource { .init(key: "There is no liked User", tableName: "Localizable", source: source, developmentValue: "There is no liked User", comment: nil) }

      /// en translation: This is something about me
      ///
      /// Key: This is something about me
      ///
      /// Locales: en, tr
      var thisIsSomethingAboutMe: RswiftResources.StringResource { .init(key: "This is something about me", tableName: "Localizable", source: source, developmentValue: "This is something about me", comment: nil) }

      /// en translation: To Height
      ///
      /// Key: To Height
      ///
      /// Locales: en, tr
      var toHeight: RswiftResources.StringResource { .init(key: "To Height", tableName: "Localizable", source: source, developmentValue: "To Height", comment: nil) }

      /// en translation: To log in, you need to verify  your identity.
      ///
      /// Key: To log in, you need to verify  your identity.
      ///
      /// Locales: en, tr
      var toLogInYouNeedToVerifyYourIdentity: RswiftResources.StringResource { .init(key: "To log in, you need to verify  your identity.", tableName: "Localizable", source: source, developmentValue: "To log in, you need to verify  your identity.", comment: nil) }

      /// en translation: Travel
      ///
      /// Key: Travel
      ///
      /// Locales: en, tr
      var travel: RswiftResources.StringResource { .init(key: "Travel", tableName: "Localizable", source: source, developmentValue: "Travel", comment: nil) }

      /// en translation: Try Again
      ///
      /// Key: Try Again
      ///
      /// Locales: en, tr
      var tryAgain: RswiftResources.StringResource { .init(key: "Try Again", tableName: "Localizable", source: source, developmentValue: "Try Again", comment: nil) }

      /// en translation: Turkey
      ///
      /// Key: Turkey
      ///
      /// Locales: en, tr
      var turkey: RswiftResources.StringResource { .init(key: "Turkey", tableName: "Localizable", source: source, developmentValue: "Turkey", comment: nil) }

      /// en translation: Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.
      ///
      /// Key: Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.
      ///
      /// Locales: en, tr
      var turnOn2StepLoginToLevelUpYourAccountSecurityOnceTurnedOnYouLlUseBothYourPasswordAndA6DigitSecurityCodeSendToYourPhoneOrEmailToLogIn: RswiftResources.StringResource { .init(key: "Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", tableName: "Localizable", source: source, developmentValue: "Turn on 2-step login to level-up your account security. Once turned on, you'll use both your password and a 6-digit security code send to your  phone or email to log in.", comment: nil) }

      /// en translation: TwilioVideo APIs
      ///
      /// Key: TwilioVideo APIs
      ///
      /// Locales: en, tr
      var twilioVideoAPIs: RswiftResources.StringResource { .init(key: "TwilioVideo APIs", tableName: "Localizable", source: source, developmentValue: "TwilioVideo APIs", comment: nil) }

      /// en translation: Twitter
      ///
      /// Key: Twitter
      ///
      /// Locales: en, tr
      var twitter: RswiftResources.StringResource { .init(key: "Twitter", tableName: "Localizable", source: source, developmentValue: "Twitter", comment: nil) }

      /// en translation: Two-factor Authentication
      ///
      /// Key: Two-factor Authentication
      ///
      /// Locales: en, tr
      var twoFactorAuthentication: RswiftResources.StringResource { .init(key: "Two-factor Authentication", tableName: "Localizable", source: source, developmentValue: "Two-factor Authentication", comment: nil) }

      /// en translation: UnFavorite
      ///
      /// Key: UnFavorite
      ///
      /// Locales: en, tr
      var unFavorite: RswiftResources.StringResource { .init(key: "UnFavorite", tableName: "Localizable", source: source, developmentValue: "UnFavorite", comment: nil) }

      /// en translation: Unblock
      ///
      /// Key: Unblock
      ///
      /// Locales: en, tr
      var unblock: RswiftResources.StringResource { .init(key: "Unblock", tableName: "Localizable", source: source, developmentValue: "Unblock", comment: nil) }

      /// en translation: Unknown
      ///
      /// Key: Unknown
      ///
      /// Locales: en, tr
      var unknown: RswiftResources.StringResource { .init(key: "Unknown", tableName: "Localizable", source: source, developmentValue: "Unknown", comment: nil) }

      /// en translation: Updated successfully...
      ///
      /// Key: Updated successfully...
      ///
      /// Locales: en, tr
      var updatedSuccessfully: RswiftResources.StringResource { .init(key: "Updated successfully...", tableName: "Localizable", source: source, developmentValue: "Updated successfully...", comment: nil) }

      /// en translation: Upgrade To Premium
      ///
      /// Key: Upgrade To Premium
      ///
      /// Locales: en, tr
      var upgradeToPremium: RswiftResources.StringResource { .init(key: "Upgrade To Premium", tableName: "Localizable", source: source, developmentValue: "Upgrade To Premium", comment: nil) }

      /// en translation: Username
      ///
      /// Key: Username
      ///
      /// Locales: en, tr
      var username: RswiftResources.StringResource { .init(key: "Username", tableName: "Localizable", source: source, developmentValue: "Username", comment: nil) }

      /// en translation: VERIFY 
      ///
      /// Key: VERIFY 
      ///
      /// Locales: en, tr
      var verifY: RswiftResources.StringResource { .init(key: "VERIFY ", tableName: "Localizable", source: source, developmentValue: "VERIFY ", comment: nil) }

      /// en translation: Verification
      ///
      /// Key: Verification
      ///
      /// Locales: en, tr
      var verification: RswiftResources.StringResource { .init(key: "Verification", tableName: "Localizable", source: source, developmentValue: "Verification", comment: nil) }

      /// en translation: Verify your Number
      ///
      /// Key: Verify your Number
      ///
      /// Locales: en, tr
      var verifyYourNumber: RswiftResources.StringResource { .init(key: "Verify your Number", tableName: "Localizable", source: source, developmentValue: "Verify your Number", comment: nil) }

      /// en translation: Very Low
      ///
      /// Key: Very Low
      ///
      /// Locales: en, tr
      var veryLow: RswiftResources.StringResource { .init(key: "Very Low", tableName: "Localizable", source: source, developmentValue: "Very Low", comment: nil) }

      /// en translation: View More
      ///
      /// Key: View More
      ///
      /// Locales: en, tr
      var viewMore: RswiftResources.StringResource { .init(key: "View More", tableName: "Localizable", source: source, developmentValue: "View More", comment: nil) }

      /// en translation: View Profile
      ///
      /// Key: View Profile
      ///
      /// Locales: en, tr
      var viewProfile: RswiftResources.StringResource { .init(key: "View Profile", tableName: "Localizable", source: source, developmentValue: "View Profile", comment: nil) }

      /// en translation: Views
      ///
      /// Key: Views
      ///
      /// Locales: en, tr
      var views: RswiftResources.StringResource { .init(key: "Views", tableName: "Localizable", source: source, developmentValue: "Views", comment: nil) }

      /// en translation: Visit you
      ///
      /// Key: Visit you
      ///
      /// Locales: en, tr
      var visitYou: RswiftResources.StringResource { .init(key: "Visit you", tableName: "Localizable", source: source, developmentValue: "Visit you", comment: nil) }

      /// en translation: Visits
      ///
      /// Key: Visits
      ///
      /// Locales: en, tr
      var visits: RswiftResources.StringResource { .init(key: "Visits", tableName: "Localizable", source: source, developmentValue: "Visits", comment: nil) }

      /// en translation: We could not establish a connection with our servers please try again later.
      ///
      /// Key: We could not establish a connection with our servers please try again later.
      ///
      /// Locales: en, tr
      var weCouldNotEstablishAConnectionWithOurServersPleaseTryAgainLater: RswiftResources.StringResource { .init(key: "We could not establish a connection with our servers please try again later.", tableName: "Localizable", source: source, developmentValue: "We could not establish a connection with our servers please try again later.", comment: nil) }

      /// en translation: We have sent you the confirmation code to your email address.
      ///
      /// Key: We have sent you the confirmation code to your email address.
      ///
      /// Locales: en, tr
      var weHaveSentYouTheConfirmationCodeToYourEmailAddress: RswiftResources.StringResource { .init(key: "We have sent you the confirmation code to your email address.", tableName: "Localizable", source: source, developmentValue: "We have sent you the confirmation code to your email address.", comment: nil) }

      /// en translation: We will display once you get your first activity here 
      ///
      /// Key: We will display once you get your first activity here 
      ///
      /// Locales: en, tr
      var weWillDisplayOnceYouGetYourFirstActivityHere: RswiftResources.StringResource { .init(key: "We will display once you get your first activity here ", tableName: "Localizable", source: source, developmentValue: "We will display once you get your first activity here ", comment: nil) }

      /// en translation: Website
      ///
      /// Key: Website
      ///
      /// Locales: en, tr
      var website: RswiftResources.StringResource { .init(key: "Website", tableName: "Localizable", source: source, developmentValue: "Website", comment: nil) }

      /// en translation: Weekly
      ///
      /// Key: Weekly
      ///
      /// Locales: en, tr
      var weekly: RswiftResources.StringResource { .init(key: "Weekly", tableName: "Localizable", source: source, developmentValue: "Weekly", comment: nil) }

      /// en translation: Withdrawals
      ///
      /// Key: Withdrawals
      ///
      /// Locales: en, tr
      var withdrawals: RswiftResources.StringResource { .init(key: "Withdrawals", tableName: "Localizable", source: source, developmentValue: "Withdrawals", comment: nil) }

      /// en translation: Write your message
      ///
      /// Key: Write your message
      ///
      /// Locales: en, tr
      var writeYourMessage: RswiftResources.StringResource { .init(key: "Write your message", tableName: "Localizable", source: source, developmentValue: "Write your message", comment: nil) }

      /// en translation: YES
      ///
      /// Key: YES
      ///
      /// Locales: en, tr
      var yeS: RswiftResources.StringResource { .init(key: "YES", tableName: "Localizable", source: source, developmentValue: "YES", comment: nil) }

      /// en translation: Yearly
      ///
      /// Key: Yearly
      ///
      /// Locales: en, tr
      var yearly: RswiftResources.StringResource { .init(key: "Yearly", tableName: "Localizable", source: source, developmentValue: "Yearly", comment: nil) }

      /// en translation: Yes, I want to delete Username permanently from QuickDate Account.
      ///
      /// Key: Yes, I want to delete Username permanently from QuickDate Account.
      ///
      /// Locales: en, tr
      var yesIWantToDeleteUsernamePermanentlyFromQuickDateAccount: RswiftResources.StringResource { .init(key: "Yes, I want to delete Username permanently from QuickDate Account.", tableName: "Localizable", source: source, developmentValue: "Yes, I want to delete Username permanently from QuickDate Account.", comment: nil) }

      /// en translation: You are Premium User
      ///
      /// Key: You are Premium User
      ///
      /// Locales: en, tr
      var youArePremiumUser: RswiftResources.StringResource { .init(key: "You are Premium User", tableName: "Localizable", source: source, developmentValue: "You are Premium User", comment: nil) }

      /// en translation: You have No Friends
      ///
      /// Key: You have No Friends
      ///
      /// Locales: en, tr
      var youHaveNoFriends: RswiftResources.StringResource { .init(key: "You have No Friends", tableName: "Localizable", source: source, developmentValue: "You have No Friends", comment: nil) }

      /// en translation: Your Expiration date: 
      ///
      /// Key: Your Expiration date: 
      ///
      /// Locales: en, tr
      var yourExpirationDate: RswiftResources.StringResource { .init(key: "Your Expiration date: ", tableName: "Localizable", source: source, developmentValue: "Your Expiration date: ", comment: nil) }

      /// en translation: Your Popularity
      ///
      /// Key: Your Popularity
      ///
      /// Locales: en, tr
      var yourPopularity: RswiftResources.StringResource { .init(key: "Your Popularity", tableName: "Localizable", source: source, developmentValue: "Your Popularity", comment: nil) }

      /// en translation: Your Quickdate Credits balance
      ///
      /// Key: Your Quickdate Credits balance
      ///
      /// Locales: en, tr
      var yourQuickdateCreditsBalance: RswiftResources.StringResource { .init(key: "Your Quickdate Credits balance", tableName: "Localizable", source: source, developmentValue: "Your Quickdate Credits balance", comment: nil) }

      /// en translation: send a gift
      ///
      /// Key: send a gift
      ///
      /// Locales: en, tr
      var sendAGift: RswiftResources.StringResource { .init(key: "send a gift", tableName: "Localizable", source: source, developmentValue: "send a gift", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 6 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `incomingMessageBackground`.
    var incomingMessageBackground: RswiftResources.ColorResource { .init(name: "incomingMessageBackground", path: [], bundle: bundle) }

    /// Color `primaryBackgroundColor`.
    var primaryBackgroundColor: RswiftResources.ColorResource { .init(name: "primaryBackgroundColor", path: [], bundle: bundle) }

    /// Color `primaryEndColor`.
    var primaryEndColor: RswiftResources.ColorResource { .init(name: "primaryEndColor", path: [], bundle: bundle) }

    /// Color `primaryTextColor`.
    var primaryTextColor: RswiftResources.ColorResource { .init(name: "primaryTextColor", path: [], bundle: bundle) }

    /// Color `secondaryBackgroundColor`.
    var secondaryBackgroundColor: RswiftResources.ColorResource { .init(name: "secondaryBackgroundColor", path: [], bundle: bundle) }

    /// Color `secondaryTextColor`.
    var secondaryTextColor: RswiftResources.ColorResource { .init(name: "secondaryTextColor", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 340 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `Ellipse 1`.
    var ellipse1: RswiftResources.ImageResource { .init(name: "Ellipse 1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Ellipse 2`.
    var ellipse2: RswiftResources.ImageResource { .init(name: "Ellipse 2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Ellipse 5`.
    var ellipse5: RswiftResources.ImageResource { .init(name: "Ellipse 5", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Friendss`.
    var friendss: RswiftResources.ImageResource { .init(name: "Friendss", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Heart Draw`.
    var heartDraw: RswiftResources.ImageResource { .init(name: "Heart Draw", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Hot`.
    var hot: RswiftResources.ImageResource { .init(name: "Hot", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ImagePlacholder`.
    var imagePlacholder: RswiftResources.ImageResource { .init(name: "ImagePlacholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Image_coin`.
    var image_coin: RswiftResources.ImageResource { .init(name: "Image_coin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Image_coinbag`.
    var image_coinbag: RswiftResources.ImageResource { .init(name: "Image_coinbag", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Image_coins`.
    var image_coins: RswiftResources.ImageResource { .init(name: "Image_coins", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Logo`.
    var logo: RswiftResources.ImageResource { .init(name: "Logo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Onboarding_icon1`.
    var onboarding_icon1: RswiftResources.ImageResource { .init(name: "Onboarding_icon1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Unfriend`.
    var unfriend: RswiftResources.ImageResource { .init(name: "Unfriend", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Vector (2)`.
    var vector2: RswiftResources.ImageResource { .init(name: "Vector (2)", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Verified`.
    var verified: RswiftResources.ImageResource { .init(name: "Verified", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `abacus`.
    var abacus: RswiftResources.ImageResource { .init(name: "abacus", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `add_ic`.
    var add_ic: RswiftResources.ImageResource { .init(name: "add_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `arrowBack`.
    var arrowBack: RswiftResources.ImageResource { .init(name: "arrowBack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `arrowCircleLeft20px`.
    var arrowCircleLeft20px: RswiftResources.ImageResource { .init(name: "arrowCircleLeft20px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `backIcon`.
    var backIcon: RswiftResources.ImageResource { .init(name: "backIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `back_ic`.
    var back_ic: RswiftResources.ImageResource { .init(name: "back_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bellss`.
    var bellss: RswiftResources.ImageResource { .init(name: "bellss", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `blog_ic`.
    var blog_ic: RswiftResources.ImageResource { .init(name: "blog_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bodyIcon24px`.
    var bodyIcon24px: RswiftResources.ImageResource { .init(name: "bodyIcon24px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `boost_ic`.
    var boost_ic: RswiftResources.ImageResource { .init(name: "boost_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `bottom right gradient`.
    var bottomRightGradient: RswiftResources.ImageResource { .init(name: "bottom right gradient", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `button gradient`.
    var buttonGradient: RswiftResources.ImageResource { .init(name: "button gradient", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `call-end`.
    var callEnd: RswiftResources.ImageResource { .init(name: "call-end", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `cards`.
    var cards: RswiftResources.ImageResource { .init(name: "cards", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chart_ic`.
    var chart_ic: RswiftResources.ImageResource { .init(name: "chart_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chatBackground`.
    var chatBackground: RswiftResources.ImageResource { .init(name: "chatBackground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chatIconImage`.
    var chatIconImage: RswiftResources.ImageResource { .init(name: "chatIconImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chat_ic`.
    var chat_ic: RswiftResources.ImageResource { .init(name: "chat_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chevronLeft`.
    var chevronLeft: RswiftResources.ImageResource { .init(name: "chevronLeft", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chevronRightRound24px`.
    var chevronRightRound24px: RswiftResources.ImageResource { .init(name: "chevronRightRound24px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chevronUp`.
    var chevronUp: RswiftResources.ImageResource { .init(name: "chevronUp", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `copy_link_ic`.
    var copy_link_ic: RswiftResources.ImageResource { .init(name: "copy_link_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `country_ic`.
    var country_ic: RswiftResources.ImageResource { .init(name: "country_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `diamond_ic`.
    var diamond_ic: RswiftResources.ImageResource { .init(name: "diamond_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dislike`.
    var dislike: RswiftResources.ImageResource { .init(name: "dislike", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dislike_card_ic`.
    var dislike_card_ic: RswiftResources.ImageResource { .init(name: "dislike_card_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `distanceIcon24px`.
    var distanceIcon24px: RswiftResources.ImageResource { .init(name: "distanceIcon24px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `dollar_ic`.
    var dollar_ic: RswiftResources.ImageResource { .init(name: "dollar_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `edit_ic`.
    var edit_ic: RswiftResources.ImageResource { .init(name: "edit_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `edit_profile_ic`.
    var edit_profile_ic: RswiftResources.ImageResource { .init(name: "edit_profile_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `email_ic`.
    var email_ic: RswiftResources.ImageResource { .init(name: "email_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ethnicity24px`.
    var ethnicity24px: RswiftResources.ImageResource { .init(name: "ethnicity24px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `eye`.
    var eye: RswiftResources.ImageResource { .init(name: "eye", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `facebook25px`.
    var facebook25px: RswiftResources.ImageResource { .init(name: "facebook25px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `facebook_ic`.
    var facebook_ic: RswiftResources.ImageResource { .init(name: "facebook_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `facebooks`.
    var facebooks: RswiftResources.ImageResource { .init(name: "facebooks", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `faq_ic`.
    var faq_ic: RswiftResources.ImageResource { .init(name: "faq_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fav_ic`.
    var fav_ic: RswiftResources.ImageResource { .init(name: "fav_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fb_icon`.
    var fb_icon: RswiftResources.ImageResource { .init(name: "fb_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `female in heart`.
    var femaleInHeart: RswiftResources.ImageResource { .init(name: "female in heart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `femaleAvatar25px`.
    var femaleAvatar25px: RswiftResources.ImageResource { .init(name: "femaleAvatar25px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `filled_heart_ic`.
    var filled_heart_ic: RswiftResources.ImageResource { .init(name: "filled_heart_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `fires`.
    var fires: RswiftResources.ImageResource { .init(name: "fires", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `firstImage1`.
    var firstImage1: RswiftResources.ImageResource { .init(name: "firstImage1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `firstImage2`.
    var firstImage2: RswiftResources.ImageResource { .init(name: "firstImage2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `friend_msg_ic`.
    var friend_msg_ic: RswiftResources.ImageResource { .init(name: "friend_msg_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `google-glas`.
    var googleGlas: RswiftResources.ImageResource { .init(name: "google-glas", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `googleLogo24px`.
    var googleLogo24px: RswiftResources.ImageResource { .init(name: "googleLogo24px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `google_ic`.
    var google_ic: RswiftResources.ImageResource { .init(name: "google_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `gplus_ic`.
    var gplus_ic: RswiftResources.ImageResource { .init(name: "gplus_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `gray_back_ic`.
    var gray_back_ic: RswiftResources.ImageResource { .init(name: "gray_back_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `gray_next_ic`.
    var gray_next_ic: RswiftResources.ImageResource { .init(name: "gray_next_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `hangUpButton`.
    var hangUpButton: RswiftResources.ImageResource { .init(name: "hangUpButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `hangup`.
    var hangup: RswiftResources.ImageResource { .init(name: "hangup", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `heartArrow`.
    var heartArrow: RswiftResources.ImageResource { .init(name: "heartArrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `heartIcon`.
    var heartIcon: RswiftResources.ImageResource { .init(name: "heartIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_AddFriend`.
    var ic_AddFriend: RswiftResources.ImageResource { .init(name: "ic_AddFriend", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_add`.
    var ic_add: RswiftResources.ImageResource { .init(name: "ic_add", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_add_f`.
    var ic_add_f: RswiftResources.ImageResource { .init(name: "ic_add_f", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_american_express`.
    var ic_american_express: RswiftResources.ImageResource { .init(name: "ic_american_express", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_ant-design_usergroup-add-outlined`.
    var ic_antDesign_usergroupAddOutlined: RswiftResources.ImageResource { .init(name: "ic_ant-design_usergroup-add-outlined", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_audio_calling`.
    var ic_audio_calling: RswiftResources.ImageResource { .init(name: "ic_audio_calling", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_auth_bg`.
    var ic_auth_bg: RswiftResources.ImageResource { .init(name: "ic_auth_bg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_authorizeNet`.
    var ic_authorizeNet: RswiftResources.ImageResource { .init(name: "ic_authorizeNet", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_baby`.
    var ic_baby: RswiftResources.ImageResource { .init(name: "ic_baby", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_back_black`.
    var ic_back_black: RswiftResources.ImageResource { .init(name: "ic_back_black", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_bag_ofcredits`.
    var ic_bag_ofcredits: RswiftResources.ImageResource { .init(name: "ic_bag_ofcredits", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_birthday`.
    var ic_birthday: RswiftResources.ImageResource { .init(name: "ic_birthday", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_blog_f`.
    var ic_blog_f: RswiftResources.ImageResource { .init(name: "ic_blog_f", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_body`.
    var ic_body: RswiftResources.ImageResource { .init(name: "ic_body", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_body_height`.
    var ic_body_height: RswiftResources.ImageResource { .init(name: "ic_body_height", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_book`.
    var ic_book: RswiftResources.ImageResource { .init(name: "ic_book", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_boost_edit_profile`.
    var ic_boost_edit_profile: RswiftResources.ImageResource { .init(name: "ic_boost_edit_profile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_box_of_credits`.
    var ic_box_of_credits: RswiftResources.ImageResource { .init(name: "ic_box_of_credits", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_briefcase`.
    var ic_briefcase: RswiftResources.ImageResource { .init(name: "ic_briefcase", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_building`.
    var ic_building: RswiftResources.ImageResource { .init(name: "ic_building", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_cake`.
    var ic_cake: RswiftResources.ImageResource { .init(name: "ic_cake", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_calender`.
    var ic_calender: RswiftResources.ImageResource { .init(name: "ic_calender", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_call`.
    var ic_call: RswiftResources.ImageResource { .init(name: "ic_call", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_car`.
    var ic_car: RswiftResources.ImageResource { .init(name: "ic_car", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_cat`.
    var ic_cat: RswiftResources.ImageResource { .init(name: "ic_cat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_cele`.
    var ic_cele: RswiftResources.ImageResource { .init(name: "ic_cele", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat`.
    var ic_chat: RswiftResources.ImageResource { .init(name: "ic_chat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat_gift`.
    var ic_chat_gift: RswiftResources.ImageResource { .init(name: "ic_chat_gift", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat_mood`.
    var ic_chat_mood: RswiftResources.ImageResource { .init(name: "ic_chat_mood", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chat_photo_camera`.
    var ic_chat_photo_camera: RswiftResources.ImageResource { .init(name: "ic_chat_photo_camera", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_check_verify_circle`.
    var ic_check_verify_circle: RswiftResources.ImageResource { .init(name: "ic_check_verify_circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_chest_of_credits`.
    var ic_chest_of_credits: RswiftResources.ImageResource { .init(name: "ic_chest_of_credits", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_cigrette`.
    var ic_cigrette: RswiftResources.ImageResource { .init(name: "ic_cigrette", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_circle_explore`.
    var ic_circle_explore: RswiftResources.ImageResource { .init(name: "ic_circle_explore", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_close_white`.
    var ic_close_white: RswiftResources.ImageResource { .init(name: "ic_close_white", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_color`.
    var ic_color: RswiftResources.ImageResource { .init(name: "ic_color", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_continue_with`.
    var ic_continue_with: RswiftResources.ImageResource { .init(name: "ic_continue_with", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_copper_card`.
    var ic_copper_card: RswiftResources.ImageResource { .init(name: "ic_copper_card", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_dimnond`.
    var ic_dimnond: RswiftResources.ImageResource { .init(name: "ic_dimnond", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_dislike_f`.
    var ic_dislike_f: RswiftResources.ImageResource { .init(name: "ic_dislike_f", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_distance`.
    var ic_distance: RswiftResources.ImageResource { .init(name: "ic_distance", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_edit_square`.
    var ic_edit_square: RswiftResources.ImageResource { .init(name: "ic_edit_square", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_empty_user`.
    var ic_empty_user: RswiftResources.ImageResource { .init(name: "ic_empty_user", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_ethnicity`.
    var ic_ethnicity: RswiftResources.ImageResource { .init(name: "ic_ethnicity", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_expand_more`.
    var ic_expand_more: RswiftResources.ImageResource { .init(name: "ic_expand_more", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_expand_more-1`.
    var ic_expand_more1: RswiftResources.ImageResource { .init(name: "ic_expand_more-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_explore_location`.
    var ic_explore_location: RswiftResources.ImageResource { .init(name: "ic_explore_location", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_explore_round`.
    var ic_explore_round: RswiftResources.ImageResource { .init(name: "ic_explore_round", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_faces`.
    var ic_faces: RswiftResources.ImageResource { .init(name: "ic_faces", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_faq_f`.
    var ic_faq_f: RswiftResources.ImageResource { .init(name: "ic_faq_f", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_fav_f`.
    var ic_fav_f: RswiftResources.ImageResource { .init(name: "ic_fav_f", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_favorite`.
    var ic_favorite: RswiftResources.ImageResource { .init(name: "ic_favorite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_favorite_black`.
    var ic_favorite_black: RswiftResources.ImageResource { .init(name: "ic_favorite_black", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_fb_login`.
    var ic_fb_login: RswiftResources.ImageResource { .init(name: "ic_fb_login", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_fi-rr-star`.
    var ic_fiRrStar: RswiftResources.ImageResource { .init(name: "ic_fi-rr-star", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_fill_location`.
    var ic_fill_location: RswiftResources.ImageResource { .init(name: "ic_fill_location", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_filled`.
    var ic_filled: RswiftResources.ImageResource { .init(name: "ic_filled", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_filter`.
    var ic_filter: RswiftResources.ImageResource { .init(name: "ic_filter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_filter_language`.
    var ic_filter_language: RswiftResources.ImageResource { .init(name: "ic_filter_language", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_fire`.
    var ic_fire: RswiftResources.ImageResource { .init(name: "ic_fire", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_fish`.
    var ic_fish: RswiftResources.ImageResource { .init(name: "ic_fish", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_flim`.
    var ic_flim: RswiftResources.ImageResource { .init(name: "ic_flim", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_fluent_building-bank-16-regular`.
    var ic_fluent_buildingBank16Regular: RswiftResources.ImageResource { .init(name: "ic_fluent_building-bank-16-regular", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_football`.
    var ic_football: RswiftResources.ImageResource { .init(name: "ic_football", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_friends`.
    var ic_friends: RswiftResources.ImageResource { .init(name: "ic_friends", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_friends_f`.
    var ic_friends_f: RswiftResources.ImageResource { .init(name: "ic_friends_f", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_gender`.
    var ic_gender: RswiftResources.ImageResource { .init(name: "ic_gender", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_get_started`.
    var ic_get_started: RswiftResources.ImageResource { .init(name: "ic_get_started", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_gift`.
    var ic_gift: RswiftResources.ImageResource { .init(name: "ic_gift", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_globe`.
    var ic_globe: RswiftResources.ImageResource { .init(name: "ic_globe", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_google_login`.
    var ic_google_login: RswiftResources.ImageResource { .init(name: "ic_google_login", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_heart`.
    var ic_heart: RswiftResources.ImageResource { .init(name: "ic_heart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_heart_vector`.
    var ic_heart_vector: RswiftResources.ImageResource { .init(name: "ic_heart_vector", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_height`.
    var ic_height: RswiftResources.ImageResource { .init(name: "ic_height", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_home_bg`.
    var ic_home_bg: RswiftResources.ImageResource { .init(name: "ic_home_bg", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_home_circle`.
    var ic_home_circle: RswiftResources.ImageResource { .init(name: "ic_home_circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_home_close`.
    var ic_home_close: RswiftResources.ImageResource { .init(name: "ic_home_close", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_home_date`.
    var ic_home_date: RswiftResources.ImageResource { .init(name: "ic_home_date", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_home_delete`.
    var ic_home_delete: RswiftResources.ImageResource { .init(name: "ic_home_delete", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_home_expand_more`.
    var ic_home_expand_more: RswiftResources.ImageResource { .init(name: "ic_home_expand_more", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_home_favorite`.
    var ic_home_favorite: RswiftResources.ImageResource { .init(name: "ic_home_favorite", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_home_filter`.
    var ic_home_filter: RswiftResources.ImageResource { .init(name: "ic_home_filter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_home_like`.
    var ic_home_like: RswiftResources.ImageResource { .init(name: "ic_home_like", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_home_location_on`.
    var ic_home_location_on: RswiftResources.ImageResource { .init(name: "ic_home_location_on", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_home_online`.
    var ic_home_online: RswiftResources.ImageResource { .init(name: "ic_home_online", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_home_proverty`.
    var ic_home_proverty: RswiftResources.ImageResource { .init(name: "ic_home_proverty", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_home_reload`.
    var ic_home_reload: RswiftResources.ImageResource { .init(name: "ic_home_reload", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_iconHeartPurple`.
    var ic_iconHeartPurple: RswiftResources.ImageResource { .init(name: "ic_iconHeartPurple", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_interest`.
    var ic_interest: RswiftResources.ImageResource { .init(name: "ic_interest", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_iyziPay`.
    var ic_iyziPay: RswiftResources.ImageResource { .init(name: "ic_iyziPay", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_language`.
    var ic_language: RswiftResources.ImageResource { .init(name: "ic_language", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_like_f`.
    var ic_like_f: RswiftResources.ImageResource { .init(name: "ic_like_f", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_likes_notification`.
    var ic_likes_notification: RswiftResources.ImageResource { .init(name: "ic_likes_notification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_linkedin`.
    var ic_linkedin: RswiftResources.ImageResource { .init(name: "ic_linkedin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_local_fire_department`.
    var ic_local_fire_department: RswiftResources.ImageResource { .init(name: "ic_local_fire_department", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_location`.
    var ic_location: RswiftResources.ImageResource { .init(name: "ic_location", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_locker_tab`.
    var ic_locker_tab: RswiftResources.ImageResource { .init(name: "ic_locker_tab", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_login_text`.
    var ic_login_text: RswiftResources.ImageResource { .init(name: "ic_login_text", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_logos_visa`.
    var ic_logos_visa: RswiftResources.ImageResource { .init(name: "ic_logos_visa", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_lucide_gift`.
    var ic_lucide_gift: RswiftResources.ImageResource { .init(name: "ic_lucide_gift", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_maestro`.
    var ic_maestro: RswiftResources.ImageResource { .init(name: "ic_maestro", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_mastercardpng`.
    var ic_mastercardpng: RswiftResources.ImageResource { .init(name: "ic_mastercardpng", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_matches_notification`.
    var ic_matches_notification: RswiftResources.ImageResource { .init(name: "ic_matches_notification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_more_vert`.
    var ic_more_vert: RswiftResources.ImageResource { .init(name: "ic_more_vert", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_morebtn`.
    var ic_morebtn: RswiftResources.ImageResource { .init(name: "ic_morebtn", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_music`.
    var ic_music: RswiftResources.ImageResource { .init(name: "ic_music", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_new_email_icon`.
    var ic_new_email_icon: RswiftResources.ImageResource { .init(name: "ic_new_email_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_new_password_icon`.
    var ic_new_password_icon: RswiftResources.ImageResource { .init(name: "ic_new_password_icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_ninja`.
    var ic_ninja: RswiftResources.ImageResource { .init(name: "ic_ninja", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_noChat`.
    var ic_noChat: RswiftResources.ImageResource { .init(name: "ic_noChat", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_noFav`.
    var ic_noFav: RswiftResources.ImageResource { .init(name: "ic_noFav", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_noNotification`.
    var ic_noNotification: RswiftResources.ImageResource { .init(name: "ic_noNotification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_no_credit_card`.
    var ic_no_credit_card: RswiftResources.ImageResource { .init(name: "ic_no_credit_card", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_online_them_color`.
    var ic_online_them_color: RswiftResources.ImageResource { .init(name: "ic_online_them_color", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_password_hide`.
    var ic_password_hide: RswiftResources.ImageResource { .init(name: "ic_password_hide", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_password_show`.
    var ic_password_show: RswiftResources.ImageResource { .init(name: "ic_password_show", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_payment_next`.
    var ic_payment_next: RswiftResources.ImageResource { .init(name: "ic_payment_next", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_paypal`.
    var ic_paypal: RswiftResources.ImageResource { .init(name: "ic_paypal", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_peopleBlack`.
    var ic_peopleBlack: RswiftResources.ImageResource { .init(name: "ic_peopleBlack", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_pets`.
    var ic_pets: RswiftResources.ImageResource { .init(name: "ic_pets", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_profile_shadow`.
    var ic_profile_shadow: RswiftResources.ImageResource { .init(name: "ic_profile_shadow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_profile_share`.
    var ic_profile_share: RswiftResources.ImageResource { .init(name: "ic_profile_share", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_property`.
    var ic_property: RswiftResources.ImageResource { .init(name: "ic_property", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_proverty`.
    var ic_proverty: RswiftResources.ImageResource { .init(name: "ic_proverty", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_radioOff`.
    var ic_radioOff: RswiftResources.ImageResource { .init(name: "ic_radioOff", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_radioOn`.
    var ic_radioOn: RswiftResources.ImageResource { .init(name: "ic_radioOn", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_razorPay`.
    var ic_razorPay: RswiftResources.ImageResource { .init(name: "ic_razorPay", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_relationship`.
    var ic_relationship: RswiftResources.ImageResource { .init(name: "ic_relationship", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_religion-1`.
    var ic_religion1: RswiftResources.ImageResource { .init(name: "ic_religion-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_requests_notification`.
    var ic_requests_notification: RswiftResources.ImageResource { .init(name: "ic_requests_notification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_rightArrow`.
    var ic_rightArrow: RswiftResources.ImageResource { .init(name: "ic_rightArrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_roind_white_black_back`.
    var ic_roind_white_black_back: RswiftResources.ImageResource { .init(name: "ic_roind_white_black_back", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_securionPay`.
    var ic_securionPay: RswiftResources.ImageResource { .init(name: "ic_securionPay", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_signal`.
    var ic_signal: RswiftResources.ImageResource { .init(name: "ic_signal", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_smoke`.
    var ic_smoke: RswiftResources.ImageResource { .init(name: "ic_smoke", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_spedo_meter`.
    var ic_spedo_meter: RswiftResources.ImageResource { .init(name: "ic_spedo_meter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_splace_bg_top`.
    var ic_splace_bg_top: RswiftResources.ImageResource { .init(name: "ic_splace_bg_top", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_splash`.
    var ic_splash: RswiftResources.ImageResource { .init(name: "ic_splash", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_star`.
    var ic_star: RswiftResources.ImageResource { .init(name: "ic_star", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_star-1`.
    var ic_star1: RswiftResources.ImageResource { .init(name: "ic_star-1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_explore`.
    var ic_tab_explore: RswiftResources.ImageResource { .init(name: "ic_tab_explore", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_mark_chat_unread`.
    var ic_tab_mark_chat_unread: RswiftResources.ImageResource { .init(name: "ic_tab_mark_chat_unread", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tab_notifications`.
    var ic_tab_notifications: RswiftResources.ImageResource { .init(name: "ic_tab_notifications", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_top_register`.
    var ic_top_register: RswiftResources.ImageResource { .init(name: "ic_top_register", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_transgender`.
    var ic_transgender: RswiftResources.ImageResource { .init(name: "ic_transgender", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_travel`.
    var ic_travel: RswiftResources.ImageResource { .init(name: "ic_travel", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_tvShow`.
    var ic_tvShow: RswiftResources.ImageResource { .init(name: "ic_tvShow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_twitter`.
    var ic_twitter: RswiftResources.ImageResource { .init(name: "ic_twitter", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_upgred_1`.
    var ic_upgred_1: RswiftResources.ImageResource { .init(name: "ic_upgred_1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_upgred_2`.
    var ic_upgred_2: RswiftResources.ImageResource { .init(name: "ic_upgred_2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_upgred_3`.
    var ic_upgred_3: RswiftResources.ImageResource { .init(name: "ic_upgred_3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_upgred_4`.
    var ic_upgred_4: RswiftResources.ImageResource { .init(name: "ic_upgred_4", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_upgred_5`.
    var ic_upgred_5: RswiftResources.ImageResource { .init(name: "ic_upgred_5", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_upgred_6`.
    var ic_upgred_6: RswiftResources.ImageResource { .init(name: "ic_upgred_6", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_upgred_7`.
    var ic_upgred_7: RswiftResources.ImageResource { .init(name: "ic_upgred_7", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_user`.
    var ic_user: RswiftResources.ImageResource { .init(name: "ic_user", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_video`.
    var ic_video: RswiftResources.ImageResource { .init(name: "ic_video", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_video_calling`.
    var ic_video_calling: RswiftResources.ImageResource { .init(name: "ic_video_calling", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_video_f`.
    var ic_video_f: RswiftResources.ImageResource { .init(name: "ic_video_f", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_visa`.
    var ic_visa: RswiftResources.ImageResource { .init(name: "ic_visa", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_visa_electron`.
    var ic_visa_electron: RswiftResources.ImageResource { .init(name: "ic_visa_electron", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_visibility`.
    var ic_visibility: RswiftResources.ImageResource { .init(name: "ic_visibility", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_visits_notification`.
    var ic_visits_notification: RswiftResources.ImageResource { .init(name: "ic_visits_notification", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ic_wowonder_login`.
    var ic_wowonder_login: RswiftResources.ImageResource { .init(name: "ic_wowonder_login", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon`.
    var icon: RswiftResources.ImageResource { .init(name: "icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `iconFilter24px`.
    var iconFilter24px: RswiftResources.ImageResource { .init(name: "iconFilter24px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon_camera`.
    var icon_camera: RswiftResources.ImageResource { .init(name: "icon_camera", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ie_ic`.
    var ie_ic: RswiftResources.ImageResource { .init(name: "ie_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `insta_ic`.
    var insta_ic: RswiftResources.ImageResource { .init(name: "insta_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `instagramss`.
    var instagramss: RswiftResources.ImageResource { .init(name: "instagramss", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `interestIcon24px`.
    var interestIcon24px: RswiftResources.ImageResource { .init(name: "interestIcon24px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `invite_image`.
    var invite_image: RswiftResources.ImageResource { .init(name: "invite_image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `lightning_ic`.
    var lightning_ic: RswiftResources.ImageResource { .init(name: "lightning_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `like`.
    var like: RswiftResources.ImageResource { .init(name: "like", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `like_card_ic`.
    var like_card_ic: RswiftResources.ImageResource { .init(name: "like_card_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `likes_ic`.
    var likes_ic: RswiftResources.ImageResource { .init(name: "likes_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `likes_ic_highlight`.
    var likes_ic_highlight: RswiftResources.ImageResource { .init(name: "likes_ic_highlight", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `linkedin_ic`.
    var linkedin_ic: RswiftResources.ImageResource { .init(name: "linkedin_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `locationFilled24px`.
    var locationFilled24px: RswiftResources.ImageResource { .init(name: "locationFilled24px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `location_ic`.
    var location_ic: RswiftResources.ImageResource { .init(name: "location_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `loginBackground`.
    var loginBackground: RswiftResources.ImageResource { .init(name: "loginBackground", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `loginBgrImage`.
    var loginBgrImage: RswiftResources.ImageResource { .init(name: "loginBgrImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `logo_WoWonder`.
    var logo_WoWonder: RswiftResources.ImageResource { .init(name: "logo_WoWonder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `magicIcon`.
    var magicIcon: RswiftResources.ImageResource { .init(name: "magicIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `male in heart`.
    var maleInHeart: RswiftResources.ImageResource { .init(name: "male in heart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `maleAvatar25px`.
    var maleAvatar25px: RswiftResources.ImageResource { .init(name: "maleAvatar25px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `map-pin`.
    var mapPin: RswiftResources.ImageResource { .init(name: "map-pin", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `matches_ic`.
    var matches_ic: RswiftResources.ImageResource { .init(name: "matches_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `matches_ic_highlight`.
    var matches_ic_highlight: RswiftResources.ImageResource { .init(name: "matches_ic_highlight", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `medal_ic`.
    var medal_ic: RswiftResources.ImageResource { .init(name: "medal_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `menu_ic`.
    var menu_ic: RswiftResources.ImageResource { .init(name: "menu_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `messagesIcon24px`.
    var messagesIcon24px: RswiftResources.ImageResource { .init(name: "messagesIcon24px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `micIcon`.
    var micIcon: RswiftResources.ImageResource { .init(name: "micIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `micOffIcon`.
    var micOffIcon: RswiftResources.ImageResource { .init(name: "micOffIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `microphone-off`.
    var microphoneOff: RswiftResources.ImageResource { .init(name: "microphone-off", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `multiplyIcon`.
    var multiplyIcon: RswiftResources.ImageResource { .init(name: "multiplyIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `mute`.
    var mute: RswiftResources.ImageResource { .init(name: "mute", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `muteButton`.
    var muteButton: RswiftResources.ImageResource { .init(name: "muteButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `my_affiliates`.
    var my_affiliates: RswiftResources.ImageResource { .init(name: "my_affiliates", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `my_msg_ic`.
    var my_msg_ic: RswiftResources.ImageResource { .init(name: "my_msg_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `next_ic`.
    var next_ic: RswiftResources.ImageResource { .init(name: "next_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `no_profile_image`.
    var no_profile_image: RswiftResources.ImageResource { .init(name: "no_profile_image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `onboarding_ic_2`.
    var onboarding_ic_2: RswiftResources.ImageResource { .init(name: "onboarding_ic_2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `onboarding_ic_3`.
    var onboarding_ic_3: RswiftResources.ImageResource { .init(name: "onboarding_ic_3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `personFillTabBar24px`.
    var personFillTabBar24px: RswiftResources.ImageResource { .init(name: "personFillTabBar24px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `personTabBar24px`.
    var personTabBar24px: RswiftResources.ImageResource { .init(name: "personTabBar24px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `petsIcon24px`.
    var petsIcon24px: RswiftResources.ImageResource { .init(name: "petsIcon24px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `phone-call`.
    var phoneCall: RswiftResources.ImageResource { .init(name: "phone-call", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `phone_ic`.
    var phone_ic: RswiftResources.ImageResource { .init(name: "phone_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `placeholder`.
    var placeholder: RswiftResources.ImageResource { .init(name: "placeholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `radioImage24px`.
    var radioImage24px: RswiftResources.ImageResource { .init(name: "radioImage24px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `red_heart_ic`.
    var red_heart_ic: RswiftResources.ImageResource { .init(name: "red_heart_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `reload_cards_ic`.
    var reload_cards_ic: RswiftResources.ImageResource { .init(name: "reload_cards_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `rocket_ic`.
    var rocket_ic: RswiftResources.ImageResource { .init(name: "rocket_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `rose_img`.
    var rose_img: RswiftResources.ImageResource { .init(name: "rose_img", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `security`.
    var security: RswiftResources.ImageResource { .init(name: "security", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `sendMessageIcon`.
    var sendMessageIcon: RswiftResources.ImageResource { .init(name: "sendMessageIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `send_emo_ic`.
    var send_emo_ic: RswiftResources.ImageResource { .init(name: "send_emo_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `send_gift_ic`.
    var send_gift_ic: RswiftResources.ImageResource { .init(name: "send_gift_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `send_img_ic`.
    var send_img_ic: RswiftResources.ImageResource { .init(name: "send_img_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `send_msg_ic`.
    var send_msg_ic: RswiftResources.ImageResource { .init(name: "send_msg_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `send_request`.
    var send_request: RswiftResources.ImageResource { .init(name: "send_request", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `send_sticker_ic`.
    var send_sticker_ic: RswiftResources.ImageResource { .init(name: "send_sticker_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `setting_ic`.
    var setting_ic: RswiftResources.ImageResource { .init(name: "setting_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `small_matches_ic`.
    var small_matches_ic: RswiftResources.ImageResource { .init(name: "small_matches_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `small_visits_ic`.
    var small_visits_ic: RswiftResources.ImageResource { .init(name: "small_visits_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `smile_ic`.
    var smile_ic: RswiftResources.ImageResource { .init(name: "smile_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `smokeIcon24px`.
    var smokeIcon24px: RswiftResources.ImageResource { .init(name: "smokeIcon24px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `social_invite_ic`.
    var social_invite_ic: RswiftResources.ImageResource { .init(name: "social_invite_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `speech-bubble-`.
    var speechBubble: RswiftResources.ImageResource { .init(name: "speech-bubble-", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `speedometer_ic`.
    var speedometer_ic: RswiftResources.ImageResource { .init(name: "speedometer_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `splashImage`.
    var splashImage: RswiftResources.ImageResource { .init(name: "splashImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `star_ic`.
    var star_ic: RswiftResources.ImageResource { .init(name: "star_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `star_yellow`.
    var star_yellow: RswiftResources.ImageResource { .init(name: "star_yellow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `stares`.
    var stares: RswiftResources.ImageResource { .init(name: "stares", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `stick_ic`.
    var stick_ic: RswiftResources.ImageResource { .init(name: "stick_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `switchCameraButton`.
    var switchCameraButton: RswiftResources.ImageResource { .init(name: "switchCameraButton", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `switchCameraIcon`.
    var switchCameraIcon: RswiftResources.ImageResource { .init(name: "switchCameraIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_card_ic`.
    var tab_card_ic: RswiftResources.ImageResource { .init(name: "tab_card_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_chat_ic`.
    var tab_chat_ic: RswiftResources.ImageResource { .init(name: "tab_chat_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_notification_ic`.
    var tab_notification_ic: RswiftResources.ImageResource { .init(name: "tab_notification_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_profile_ic`.
    var tab_profile_ic: RswiftResources.ImageResource { .init(name: "tab_profile_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tab_trending_ic`.
    var tab_trending_ic: RswiftResources.ImageResource { .init(name: "tab_trending_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `target_ic`.
    var target_ic: RswiftResources.ImageResource { .init(name: "target_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `thumbnail`.
    var thumbnail: RswiftResources.ImageResource { .init(name: "thumbnail", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `thumbnail_circle`.
    var thumbnail_circle: RswiftResources.ImageResource { .init(name: "thumbnail_circle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `top right gradient`.
    var topRightGradient: RswiftResources.ImageResource { .init(name: "top right gradient", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `trophy`.
    var trophy: RswiftResources.ImageResource { .init(name: "trophy", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tutorial_ic_1`.
    var tutorial_ic_1: RswiftResources.ImageResource { .init(name: "tutorial_ic_1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tutorial_ic_2`.
    var tutorial_ic_2: RswiftResources.ImageResource { .init(name: "tutorial_ic_2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `twitter_ic`.
    var twitter_ic: RswiftResources.ImageResource { .init(name: "twitter_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `twoFactor`.
    var twoFactor: RswiftResources.ImageResource { .init(name: "twoFactor", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `unisexAvater25px`.
    var unisexAvater25px: RswiftResources.ImageResource { .init(name: "unisexAvater25px", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `userclock`.
    var userclock: RswiftResources.ImageResource { .init(name: "userclock", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `username_ic`.
    var username_ic: RswiftResources.ImageResource { .init(name: "username_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `vending_machine`.
    var vending_machine: RswiftResources.ImageResource { .init(name: "vending_machine", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `verify_img`.
    var verify_img: RswiftResources.ImageResource { .init(name: "verify_img", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `videoMuteIcon`.
    var videoMuteIcon: RswiftResources.ImageResource { .init(name: "videoMuteIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `videoMutedIndicator`.
    var videoMutedIndicator: RswiftResources.ImageResource { .init(name: "videoMutedIndicator", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `viewPager_crown`.
    var viewPager_crown: RswiftResources.ImageResource { .init(name: "viewPager_crown", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `viewPager_heart`.
    var viewPager_heart: RswiftResources.ImageResource { .init(name: "viewPager_heart", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `viewPager_sticker`.
    var viewPager_sticker: RswiftResources.ImageResource { .init(name: "viewPager_sticker", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `viewPager_target`.
    var viewPager_target: RswiftResources.ImageResource { .init(name: "viewPager_target", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `visits_ic`.
    var visits_ic: RswiftResources.ImageResource { .init(name: "visits_ic", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `visits_ic_highlight`.
    var visits_ic_highlight: RswiftResources.ImageResource { .init(name: "visits_ic_highlight", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `voice`.
    var voice: RswiftResources.ImageResource { .init(name: "voice", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `volume`.
    var volume: RswiftResources.ImageResource { .init(name: "volume", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `woWonderLogo`.
    var woWonderLogo: RswiftResources.ImageResource { .init(name: "woWonderLogo", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `world`.
    var world: RswiftResources.ImageResource { .init(name: "world", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.entitlements` struct is generated, and contains static references to 2 properties.
  struct entitlements {
    let comAppleDeveloperApplesignin = comAppleDeveloperApplesignin()
    let comAppleDeveloperUserFonts = comAppleDeveloperUserFonts()
    struct comAppleDeveloperApplesignin {
      let `default`: String = "Default"
    }
    struct comAppleDeveloperUserFonts {
      let appUsage: String = "app-usage"
      let systemInstallation: String = "system-installation"
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 24 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `FontAwesome5Brands-Regular`.
    var fontAwesome5BrandsRegular: RswiftResources.FontResource { .init(name: "FontAwesome5Brands-Regular", bundle: bundle, filename: "fa-brands-400.ttf") }

    /// Font `FontAwesome5Pro-Light`.
    var fontAwesome5ProLight: RswiftResources.FontResource { .init(name: "FontAwesome5Pro-Light", bundle: bundle, filename: "fa-light-300.ttf") }

    /// Font `FontAwesome5Pro-Regular`.
    var fontAwesome5ProRegular: RswiftResources.FontResource { .init(name: "FontAwesome5Pro-Regular", bundle: bundle, filename: "fa-regular-400.ttf") }

    /// Font `FontAwesome5Pro-Solid`.
    var fontAwesome5ProSolid: RswiftResources.FontResource { .init(name: "FontAwesome5Pro-Solid", bundle: bundle, filename: "fa-solid-900.ttf") }

    /// Font `Poppins-Black`.
    var poppinsBlack: RswiftResources.FontResource { .init(name: "Poppins-Black", bundle: bundle, filename: "Poppins-Black.otf") }

    /// Font `Poppins-BlackItalic`.
    var poppinsBlackItalic: RswiftResources.FontResource { .init(name: "Poppins-BlackItalic", bundle: bundle, filename: "Poppins-BlackItalic.otf") }

    /// Font `Poppins-Bold`.
    var poppinsBold: RswiftResources.FontResource { .init(name: "Poppins-Bold", bundle: bundle, filename: "Poppins-Bold.otf") }

    /// Font `Poppins-BoldItalic`.
    var poppinsBoldItalic: RswiftResources.FontResource { .init(name: "Poppins-BoldItalic", bundle: bundle, filename: "Poppins-BoldItalic.otf") }

    /// Font `Poppins-ExtraBold`.
    var poppinsExtraBold: RswiftResources.FontResource { .init(name: "Poppins-ExtraBold", bundle: bundle, filename: "Poppins-ExtraBold.otf") }

    /// Font `Poppins-ExtraBoldItalic`.
    var poppinsExtraBoldItalic: RswiftResources.FontResource { .init(name: "Poppins-ExtraBoldItalic", bundle: bundle, filename: "Poppins-ExtraBoldItalic.otf") }

    /// Font `Poppins-ExtraLight`.
    var poppinsExtraLight: RswiftResources.FontResource { .init(name: "Poppins-ExtraLight", bundle: bundle, filename: "Poppins-ExtraLight.otf") }

    /// Font `Poppins-ExtraLightItalic`.
    var poppinsExtraLightItalic: RswiftResources.FontResource { .init(name: "Poppins-ExtraLightItalic", bundle: bundle, filename: "Poppins-ExtraLightItalic.otf") }

    /// Font `Poppins-Italic`.
    var poppinsItalic: RswiftResources.FontResource { .init(name: "Poppins-Italic", bundle: bundle, filename: "Poppins-Italic.otf") }

    /// Font `Poppins-Light`.
    var poppinsLight: RswiftResources.FontResource { .init(name: "Poppins-Light", bundle: bundle, filename: "Poppins-Light.otf") }

    /// Font `Poppins-LightItalic`.
    var poppinsLightItalic: RswiftResources.FontResource { .init(name: "Poppins-LightItalic", bundle: bundle, filename: "Poppins-LightItalic.otf") }

    /// Font `Poppins-Medium`.
    var poppinsMedium: RswiftResources.FontResource { .init(name: "Poppins-Medium", bundle: bundle, filename: "Poppins-Medium.otf") }

    /// Font `Poppins-MediumItalic`.
    var poppinsMediumItalic: RswiftResources.FontResource { .init(name: "Poppins-MediumItalic", bundle: bundle, filename: "Poppins-MediumItalic.otf") }

    /// Font `Poppins-Regular`.
    var poppinsRegular: RswiftResources.FontResource { .init(name: "Poppins-Regular", bundle: bundle, filename: "Poppins-Regular.otf") }

    /// Font `Poppins-SemiBold`.
    var poppinsSemiBold: RswiftResources.FontResource { .init(name: "Poppins-SemiBold", bundle: bundle, filename: "Poppins-SemiBold.otf") }

    /// Font `Poppins-SemiBoldItalic`.
    var poppinsSemiBoldItalic: RswiftResources.FontResource { .init(name: "Poppins-SemiBoldItalic", bundle: bundle, filename: "Poppins-SemiBoldItalic.otf") }

    /// Font `Poppins-Thin`.
    var poppinsThin: RswiftResources.FontResource { .init(name: "Poppins-Thin", bundle: bundle, filename: "Poppins-Thin.otf") }

    /// Font `Poppins-ThinItalic`.
    var poppinsThinItalic: RswiftResources.FontResource { .init(name: "Poppins-ThinItalic", bundle: bundle, filename: "Poppins-ThinItalic.otf") }

    /// Font `SFUIDisplay-Medium`.
    var sfuiDisplayMedium: RswiftResources.FontResource { .init(name: "SFUIDisplay-Medium", bundle: bundle, filename: "SF-UI-Display-Medium.ttf") }

    /// Font `SFUIDisplay-Regular`.
    var sfuiDisplayRegular: RswiftResources.FontResource { .init(name: "SFUIDisplay-Regular", bundle: bundle, filename: "SF-UI-Display-Regular.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [fontAwesome5BrandsRegular, fontAwesome5ProLight, fontAwesome5ProRegular, fontAwesome5ProSolid, poppinsBlack, poppinsBlackItalic, poppinsBold, poppinsBoldItalic, poppinsExtraBold, poppinsExtraBoldItalic, poppinsExtraLight, poppinsExtraLightItalic, poppinsItalic, poppinsLight, poppinsLightItalic, poppinsMedium, poppinsMediumItalic, poppinsRegular, poppinsSemiBold, poppinsSemiBoldItalic, poppinsThin, poppinsThinItalic, sfuiDisplayMedium, sfuiDisplayRegular].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 40 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `Poppins-Black.otf`.
    var poppinsBlackOtf: RswiftResources.FileResource { .init(name: "Poppins-Black", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-BlackItalic.otf`.
    var poppinsBlackItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-BlackItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Bold.otf`.
    var poppinsBoldOtf: RswiftResources.FileResource { .init(name: "Poppins-Bold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-BoldItalic.otf`.
    var poppinsBoldItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-BoldItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-ExtraBold.otf`.
    var poppinsExtraBoldOtf: RswiftResources.FileResource { .init(name: "Poppins-ExtraBold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-ExtraBoldItalic.otf`.
    var poppinsExtraBoldItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-ExtraBoldItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-ExtraLight.otf`.
    var poppinsExtraLightOtf: RswiftResources.FileResource { .init(name: "Poppins-ExtraLight", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-ExtraLightItalic.otf`.
    var poppinsExtraLightItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-ExtraLightItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Italic.otf`.
    var poppinsItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-Italic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Light.otf`.
    var poppinsLightOtf: RswiftResources.FileResource { .init(name: "Poppins-Light", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-LightItalic.otf`.
    var poppinsLightItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-LightItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Medium.otf`.
    var poppinsMediumOtf: RswiftResources.FileResource { .init(name: "Poppins-Medium", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-MediumItalic.otf`.
    var poppinsMediumItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-MediumItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Regular.otf`.
    var poppinsRegularOtf: RswiftResources.FileResource { .init(name: "Poppins-Regular", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-SemiBold.otf`.
    var poppinsSemiBoldOtf: RswiftResources.FileResource { .init(name: "Poppins-SemiBold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-SemiBoldItalic.otf`.
    var poppinsSemiBoldItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-SemiBoldItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-Thin.otf`.
    var poppinsThinOtf: RswiftResources.FileResource { .init(name: "Poppins-Thin", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Poppins-ThinItalic.otf`.
    var poppinsThinItalicOtf: RswiftResources.FileResource { .init(name: "Poppins-ThinItalic", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SF-UI-Display-Medium.ttf`.
    var sfuiDisplayMediumTtf: RswiftResources.FileResource { .init(name: "SF-UI-Display-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `SF-UI-Display-Regular.ttf`.
    var sfuiDisplayRegularTtf: RswiftResources.FileResource { .init(name: "SF-UI-Display-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64-apple-ios.abi.json`.
    var arm64AppleIosAbiJson: RswiftResources.FileResource { .init(name: "arm64-apple-ios.abi", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64-apple-ios.private.swiftinterface`.
    var arm64AppleIosPrivateSwiftinterface: RswiftResources.FileResource { .init(name: "arm64-apple-ios.private", pathExtension: "swiftinterface", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64-apple-ios.swiftdoc`.
    var arm64AppleIosSwiftdoc: RswiftResources.FileResource { .init(name: "arm64-apple-ios", pathExtension: "swiftdoc", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64-apple-ios.swiftinterface`.
    var arm64AppleIosSwiftinterface: RswiftResources.FileResource { .init(name: "arm64-apple-ios", pathExtension: "swiftinterface", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64-apple-ios.swiftmodule`.
    var arm64AppleIosSwiftmodule: RswiftResources.FileResource { .init(name: "arm64-apple-ios", pathExtension: "swiftmodule", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `arm64-apple-ios.swiftsourceinfo`.
    var arm64AppleIosSwiftsourceinfo: RswiftResources.FileResource { .init(name: "arm64-apple-ios", pathExtension: "swiftsourceinfo", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `countries.json`.
    var countriesJson: RswiftResources.FileResource { .init(name: "countries", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fa-brands-400.ttf`.
    var faBrands400Ttf: RswiftResources.FileResource { .init(name: "fa-brands-400", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fa-light-300.ttf`.
    var faLight300Ttf: RswiftResources.FileResource { .init(name: "fa-light-300", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fa-regular-400.ttf`.
    var faRegular400Ttf: RswiftResources.FileResource { .init(name: "fa-regular-400", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fa-solid-900.ttf`.
    var faSolid900Ttf: RswiftResources.FileResource { .init(name: "fa-solid-900", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fontawesome-v3.1.ttf`.
    var fontawesomeV31Ttf: RswiftResources.FileResource { .init(name: "fontawesome-v3.1", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `fontawesome-webfont.ttf`.
    var fontawesomeWebfontTtf: RswiftResources.FileResource { .init(name: "fontawesome-webfont", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `mystic_call.mp3`.
    var mystic_callMp3: RswiftResources.FileResource { .init(name: "mystic_call", pathExtension: "mp3", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.abi.json`.
    var x86_64AppleIosSimulatorAbiJson: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator.abi", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.private.swiftinterface`.
    var x86_64AppleIosSimulatorPrivateSwiftinterface: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator.private", pathExtension: "swiftinterface", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftdoc`.
    var x86_64AppleIosSimulatorSwiftdoc: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftdoc", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftinterface`.
    var x86_64AppleIosSimulatorSwiftinterface: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftinterface", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftmodule`.
    var x86_64AppleIosSimulatorSwiftmodule: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftmodule", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `x86_64-apple-ios-simulator.swiftsourceinfo`.
    var x86_64AppleIosSimulatorSwiftsourceinfo: RswiftResources.FileResource { .init(name: "x86_64-apple-ios-simulator", pathExtension: "swiftsourceinfo", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.id` struct is generated, and contains static references to 1 accessibility identifiers.
  struct id {
    let tabView = tabView()

    /// This `_R.id.tabView` struct is generated, and contains static references to 1 accessibility identifiers.
    struct tabView {

      /// Accessibility identifier `ic_tab_user_profile`.
      let ic_tab_user_profile = "ic_tab_user_profile"
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 62 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `AddStoryCollectionCell`.
    var addStoryCollectionCell: RswiftResources.NibReferenceReuseIdentifier<AddStoryCollectionCell, AddStoryCollectionCell> { .init(name: "AddStoryCollectionCell", bundle: bundle, identifier: "AddStoryCollectionCell") }

    /// Nib `BlockUserTableItem`.
    var blockUserTableItem: RswiftResources.NibReferenceReuseIdentifier<BlockUserTableItem, BlockUserTableItem> { .init(name: "BlockUserTableItem", bundle: bundle, identifier: "BlockUserTableItem") }

    /// Nib `BlogViewTableItem`.
    var blogViewTableItem: RswiftResources.NibReferenceReuseIdentifier<BlogViewTableItem, BlogViewTableItem> { .init(name: "BlogViewTableItem", bundle: bundle, identifier: "BlogViewTableItem") }

    /// Nib `BlogsTableCell`.
    var blogsTableCell: RswiftResources.NibReferenceReuseIdentifier<BlogsTableCell, BlogsTableCell> { .init(name: "BlogsTableCell", bundle: bundle, identifier: "BlogsTableCell") }

    /// Nib `BuyCreditSectionOneCollectionItem`.
    var buyCreditSectionOneCollectionItem: RswiftResources.NibReferenceReuseIdentifier<BuyCreditSectionOneCollectionItem, BuyCreditSectionOneCollectionItem> { .init(name: "BuyCreditSectionOneCollectionItem", bundle: bundle, identifier: "BuyCreditSectionOneCollectionItem") }

    /// Nib `BuyCreditSectionTableItem`.
    var buyCreditSectionTableItem: RswiftResources.NibReferenceReuseIdentifier<BuyCreditSectionTableItem, BuyCreditSectionTableItem> { .init(name: "BuyCreditSectionTableItem", bundle: bundle, identifier: "BuyCreditSectionTableItem") }

    /// Nib `BuyCreditSectionThreeTableItem`.
    var buyCreditSectionThreeTableItem: RswiftResources.NibReferenceReuseIdentifier<BuyCreditSectionThreeTableItem, BuyCreditSectionThreeTableItem> { .init(name: "BuyCreditSectionThreeTableItem", bundle: bundle, identifier: "BuyCreditSectionThreeTableItem") }

    /// Nib `BuyCreditSectionTwoCollectionItem`.
    var buyCreditSectionTwoCollectionItem: RswiftResources.NibReferenceReuseIdentifier<BuyCreditSectionTwoCollectionItem, BuyCreditSectionTwoCollectionItem> { .init(name: "BuyCreditSectionTwoCollectionItem", bundle: bundle, identifier: "BuyCreditSectionTwoCollectionItem") }

    /// Nib `BuyCreditSectionTwoTableItem`.
    var buyCreditSectionTwoTableItem: RswiftResources.NibReferenceReuseIdentifier<BuyCreditSectionTwoTableItem, BuyCreditSectionTwoTableItem> { .init(name: "BuyCreditSectionTwoTableItem", bundle: bundle, identifier: "BuyCreditSectionTwoTableItem") }

    /// Nib `ChatReceiverTableItem`.
    var chatReceiverTableItem: RswiftResources.NibReferenceReuseIdentifier<ChatReceiverTableItem, ChatReceiverTableItem> { .init(name: "ChatReceiverTableItem", bundle: bundle, identifier: "ChatReceiverTableItem") }

    /// Nib `ChatScreenTableItem`.
    var chatScreenTableItem: RswiftResources.NibReferenceReuseIdentifier<ChatScreenTableItem, ChatScreenTableItem> { .init(name: "ChatScreenTableItem", bundle: bundle, identifier: "ChatScreenTableItem") }

    /// Nib `ChatSenderTableItem`.
    var chatSenderTableItem: RswiftResources.NibReferenceReuseIdentifier<ChatSenderTableItem, ChatSenderTableItem> { .init(name: "ChatSenderTableItem", bundle: bundle, identifier: "ChatSenderTableItem") }

    /// Nib `ChatStickerReceiverCell`.
    var chatStickerReceiverCell: RswiftResources.NibReferenceReuseIdentifier<ChatStickerReceiverCell, ChatStickerReceiverCell> { .init(name: "ChatStickerReceiverCell", bundle: bundle, identifier: "ChatStickerReceiverCell") }

    /// Nib `ChatStickerSenderCell`.
    var chatStickerSenderCell: RswiftResources.NibReferenceReuseIdentifier<ChatStickerSenderCell, ChatStickerSenderCell> { .init(name: "ChatStickerSenderCell", bundle: bundle, identifier: "ChatStickerSenderCell") }

    /// Nib `ChatTableItem`.
    var chatTableItem: RswiftResources.NibReferenceReuseIdentifier<ChatTableItem, ChatTableItem> { .init(name: "ChatTableItem", bundle: bundle, identifier: "ChatTableItem") }

    /// Nib `CommentTableViewCell`.
    var commentTableViewCell: RswiftResources.NibReferenceReuseIdentifier<CommentTableViewCell, CommentTableViewCell> { .init(name: "CommentTableViewCell", bundle: bundle, identifier: "CommentTableViewCell") }

    /// Nib `FavoriteCollectionItem`.
    var favoriteCollectionItem: RswiftResources.NibReferenceReuseIdentifier<FavoriteCollectionItem, FavoriteCollectionItem> { .init(name: "FavoriteCollectionItem", bundle: bundle, identifier: "FavoriteCollectionItem") }

    /// Nib `FriendRequestTableItem`.
    var friendRequestTableItem: RswiftResources.NibReferenceReuseIdentifier<FriendRequestTableItem, FriendRequestTableItem> { .init(name: "FriendRequestTableItem", bundle: bundle, identifier: "FriendRequestTableItem") }

    /// Nib `HotOrNotCollectionItem`.
    var hotOrNotCollectionItem: RswiftResources.NibReferenceReuseIdentifier<HotOrNotCollectionItem, HotOrNotCollectionItem> { .init(name: "HotOrNotCollectionItem", bundle: bundle, identifier: "HotOrNotCollectionItem") }

    /// Nib `HotOrNotListCollectionViewCell`.
    var hotOrNotListCollectionViewCell: RswiftResources.NibReference<HotOrNotListCollectionViewCell> { .init(name: "HotOrNotListCollectionViewCell", bundle: bundle) }

    /// Nib `HotOrNotShowTableItem`.
    var hotOrNotShowTableItem: RswiftResources.NibReferenceReuseIdentifier<HotOrNotShowTableItem, HotOrNotShowTableItem> { .init(name: "HotOrNotShowTableItem", bundle: bundle, identifier: "HotOrNotShowTableItem") }

    /// Nib `IconWithLabelCell`.
    var iconWithLabelCell: RswiftResources.NibReference<IconWithLabelCell> { .init(name: "IconWithLabelCell", bundle: bundle) }

    /// Nib `InviteFriendsSecondTableItem`.
    var inviteFriendsSecondTableItem: RswiftResources.NibReferenceReuseIdentifier<InviteFriendsSecondTableItem, InviteFriendsSecondTableItem> { .init(name: "InviteFriendsSecondTableItem", bundle: bundle, identifier: "InviteFriendsSecondTableItem") }

    /// Nib `InviteFriendsTableItem`.
    var inviteFriendsTableItem: RswiftResources.NibReferenceReuseIdentifier<InviteFriendsTableItem, InviteFriendsTableItem> { .init(name: "InviteFriendsTableItem", bundle: bundle, identifier: "InviteFriendsTableItem") }

    /// Nib `ListFriendCollectionItem`.
    var listFriendCollectionItem: RswiftResources.NibReferenceReuseIdentifier<ListFriendCollectionItem, ListFriendCollectionItem> { .init(name: "ListFriendCollectionItem", bundle: bundle, identifier: "ListFriendCollectionItem") }

    /// Nib `LoginTableItem`.
    var loginTableItem: RswiftResources.NibReferenceReuseIdentifier<LoginTableItem, LoginTableItem> { .init(name: "LoginTableItem", bundle: bundle, identifier: "LoginTableItem") }

    /// Nib `NoTrendingDataTableItem`.
    var noTrendingDataTableItem: RswiftResources.NibReferenceReuseIdentifier<NoTrendingDataTableItem, NoTrendingDataTableItem> { .init(name: "NoTrendingDataTableItem", bundle: bundle, identifier: "NoTrendingDataTableItem") }

    /// Nib `notificationTableCell`.
    var notificationTableCell: RswiftResources.NibReferenceReuseIdentifier<notificationTableCell, notificationTableCell> { .init(name: "notificationTableCell", bundle: bundle, identifier: "notificationTableCell") }

    /// Nib `OnlineUserCollectionItem`.
    var onlineUserCollectionItem: RswiftResources.NibReferenceReuseIdentifier<OnlineUserCollectionItem, OnlineUserCollectionItem> { .init(name: "OnlineUserCollectionItem", bundle: bundle, identifier: "OnlineUserCollectionItem") }

    /// Nib `PeopleIDislikeCollectionItem`.
    var peopleIDislikeCollectionItem: RswiftResources.NibReferenceReuseIdentifier<PeopleIDislikeCollectionItem, PeopleIDislikeCollectionItem> { .init(name: "PeopleIDislikeCollectionItem", bundle: bundle, identifier: "PeopleIDislikeCollectionItem") }

    /// Nib `PeopleILikeCollectionItem`.
    var peopleILikeCollectionItem: RswiftResources.NibReferenceReuseIdentifier<PeopleILikeCollectionItem, PeopleILikeCollectionItem> { .init(name: "PeopleILikeCollectionItem", bundle: bundle, identifier: "PeopleILikeCollectionItem") }

    /// Nib `ProUserListCollectionViewCell`.
    var proUserListCollectionViewCell: RswiftResources.NibReference<ProUserListCollectionViewCell> { .init(name: "ProUserListCollectionViewCell", bundle: bundle) }

    /// Nib `ProfileGideCell`.
    var profileGideCell: RswiftResources.NibReference<ProfileGideCell> { .init(name: "ProfileGideCell", bundle: bundle) }

    /// Nib `ProfileSectionOneTableItem`.
    var profileSectionOneTableItem: RswiftResources.NibReferenceReuseIdentifier<ProfileSectionOneTableItem, ProfileSectionOneTableItem> { .init(name: "ProfileSectionOneTableItem", bundle: bundle, identifier: "ProfileSectionOneTableItem") }

    /// Nib `profileSectionTwoTableItem`.
    var profileSectionTwoTableItem: RswiftResources.NibReferenceReuseIdentifier<profileSectionTwoTableItem, profileSectionTwoTableItem> { .init(name: "profileSectionTwoTableItem", bundle: bundle, identifier: "profileSectionTwoTableItem") }

    /// Nib `ReceiverImageTableItem`.
    var receiverImageTableItem: RswiftResources.NibReferenceReuseIdentifier<ReceiverImageTableItem, ReceiverImageTableItem> { .init(name: "ReceiverImageTableItem", bundle: bundle, identifier: "ReceiverImageTableItem") }

    /// Nib `RegisterTableItem`.
    var registerTableItem: RswiftResources.NibReferenceReuseIdentifier<RegisterTableItem, RegisterTableItem> { .init(name: "RegisterTableItem", bundle: bundle, identifier: "RegisterTableItem") }

    /// Nib `SenderImageTableItem`.
    var senderImageTableItem: RswiftResources.NibReferenceReuseIdentifier<SenderImageTableItem, SenderImageTableItem> { .init(name: "SenderImageTableItem", bundle: bundle, identifier: "SenderImageTableItem") }

    /// Nib `SessionTableItem`.
    var sessionTableItem: RswiftResources.NibReferenceReuseIdentifier<SessionTableItem, SessionTableItem> { .init(name: "SessionTableItem", bundle: bundle, identifier: "SessionTableItem") }

    /// Nib `SettingsSectionTableItem`.
    var settingsSectionTableItem: RswiftResources.NibReferenceReuseIdentifier<SettingsSectionTableItem, SettingsSectionTableItem> { .init(name: "SettingsSectionTableItem", bundle: bundle, identifier: "SettingsSectionTableItem") }

    /// Nib `SettingsSectionThreeTableItem`.
    var settingsSectionThreeTableItem: RswiftResources.NibReferenceReuseIdentifier<SettingsSectionThreeTableItem, SettingsSectionThreeTableItem> { .init(name: "SettingsSectionThreeTableItem", bundle: bundle, identifier: "SettingsSectionThreeTableItem") }

    /// Nib `SettingsSectionTwoTableItem`.
    var settingsSectionTwoTableItem: RswiftResources.NibReferenceReuseIdentifier<SettingsSectionTwoTableItem, SettingsSectionTwoTableItem> { .init(name: "SettingsSectionTwoTableItem", bundle: bundle, identifier: "SettingsSectionTwoTableItem") }

    /// Nib `ShowBlogSectionOneTableItem`.
    var showBlogSectionOneTableItem: RswiftResources.NibReferenceReuseIdentifier<ShowBlogSectionOneTableItem, ShowBlogSectionOneTableItem> { .init(name: "ShowBlogSectionOneTableItem", bundle: bundle, identifier: "ShowBlogSectionOneTableItem") }

    /// Nib `ShowBlogSectionTwoTableItem`.
    var showBlogSectionTwoTableItem: RswiftResources.NibReferenceReuseIdentifier<ShowBlogSectionTwoTableItem, ShowBlogSectionTwoTableItem> { .init(name: "ShowBlogSectionTwoTableItem", bundle: bundle, identifier: "ShowBlogSectionTwoTableItem") }

    /// Nib `ShowUserDetailsCollectionItem`.
    var showUserDetailsCollectionItem: RswiftResources.NibReferenceReuseIdentifier<ShowUserDetailsCollectionItem, ShowUserDetailsCollectionItem> { .init(name: "ShowUserDetailsCollectionItem", bundle: bundle, identifier: "ShowUserDetailsCollectionItem") }

    /// Nib `ShowUserDetailsTableItem`.
    var showUserDetailsTableItem: RswiftResources.NibReferenceReuseIdentifier<ShowUserDetailsTableItem, ShowUserDetailsTableItem> { .init(name: "ShowUserDetailsTableItem", bundle: bundle, identifier: "ShowUserDetailsTableItem") }

    /// Nib `SocialInfoCell`.
    var socialInfoCell: RswiftResources.NibReferenceReuseIdentifier<SocialInfoCell, SocialInfoCell> { .init(name: "SocialInfoCell", bundle: bundle, identifier: "SocialInfoCell") }

    /// Nib `StartTableItem`.
    var startTableItem: RswiftResources.NibReferenceReuseIdentifier<StartTableItem, StartTableItem> { .init(name: "StartTableItem", bundle: bundle, identifier: "StartTableItem") }

    /// Nib `StickerAndGiftCollectionCell`.
    var stickerAndGiftCollectionCell: RswiftResources.NibReference<StickerAndGiftCollectionCell> { .init(name: "StickerAndGiftCollectionCell", bundle: bundle) }

    /// Nib `TabView`.
    var tabView: RswiftResources.NibReference<TabView> { .init(name: "TabView", bundle: bundle) }

    /// Nib `TransactionsTableViewCell`.
    var transactionsTableViewCell: RswiftResources.NibReference<TransactionsTableViewCell> { .init(name: "TransactionsTableViewCell", bundle: bundle) }

    /// Nib `TrendingCollectionItem`.
    var trendingCollectionItem: RswiftResources.NibReferenceReuseIdentifier<TrendingCollectionItem, TrendingCollectionItem> { .init(name: "TrendingCollectionItem", bundle: bundle, identifier: "TrendingCollectionItem") }

    /// Nib `TrendingSectionCollectionCell`.
    var trendingSectionCollectionCell: RswiftResources.NibReference<TrendingSectionCollectionCell> { .init(name: "TrendingSectionCollectionCell", bundle: bundle) }

    /// Nib `UpgradCellTableViewCell`.
    var upgradCellTableViewCell: RswiftResources.NibReference<UpgradCellTableViewCell> { .init(name: "UpgradCellTableViewCell", bundle: bundle) }

    /// Nib `UpgradeAccountCollectionItem`.
    var upgradeAccountCollectionItem: RswiftResources.NibReferenceReuseIdentifier<UpgradeAccountCollectionItem, UpgradeAccountCollectionItem> { .init(name: "UpgradeAccountCollectionItem", bundle: bundle, identifier: "UpgradeAccountCollectionItem") }

    /// Nib `UserAboutCell`.
    var userAboutCell: RswiftResources.NibReferenceReuseIdentifier<UserAboutCell, UserAboutCell> { .init(name: "UserAboutCell", bundle: bundle, identifier: "UserAboutCell") }

    /// Nib `UserActivityCell`.
    var userActivityCell: RswiftResources.NibReference<UserActivityCell> { .init(name: "UserActivityCell", bundle: bundle) }

    /// Nib `UserHairCell`.
    var userHairCell: RswiftResources.NibReference<UserHairCell> { .init(name: "UserHairCell", bundle: bundle) }

    /// Nib `UserImagesCell`.
    var userImagesCell: RswiftResources.NibReferenceReuseIdentifier<UserImagesCell, UserImagesCell> { .init(name: "UserImagesCell", bundle: bundle, identifier: "UserImagesCell") }

    /// Nib `UserIntroCell`.
    var userIntroCell: RswiftResources.NibReferenceReuseIdentifier<UserIntroCell, UserIntroCell> { .init(name: "UserIntroCell", bundle: bundle, identifier: "UserIntroCell") }

    /// Nib `UserLocationCell`.
    var userLocationCell: RswiftResources.NibReference<UserLocationCell> { .init(name: "UserLocationCell", bundle: bundle) }

    /// Nib `UserSocialLinkCell`.
    var userSocialLinkCell: RswiftResources.NibReference<UserSocialLinkCell> { .init(name: "UserSocialLinkCell", bundle: bundle) }

    func validate() throws {
      if UIKit.UIImage(named: "ic_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_add' is used in nib 'AddStoryCollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_explore_round", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_explore_round' is used in nib 'AddStoryCollectionCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryEndColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryEndColor' is used in nib 'AddStoryCollectionCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_morebtn", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_morebtn' is used in nib 'BlogViewTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryBackgroundColor' is used in nib 'BlogsTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryTextColor' is used in nib 'BlogsTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "secondaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'secondaryBackgroundColor' is used in nib 'BlogsTableCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "secondaryTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'secondaryTextColor' is used in nib 'BlogsTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "viewPager_crown", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'viewPager_crown' is used in nib 'BuyCreditSectionOneCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_proverty", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_proverty' is used in nib 'BuyCreditSectionTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryBackgroundColor' is used in nib 'BuyCreditSectionThreeTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Image_coins", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Image_coins' is used in nib 'BuyCreditSectionTwoCollectionItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryBackgroundColor' is used in nib 'BuyCreditSectionTwoTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "friend_msg_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'friend_msg_ic' is used in nib 'ChatReceiverTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "chatIconImage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chatIconImage' is used in nib 'ChatScreenTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "firstImage1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'firstImage1' is used in nib 'ChatScreenTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryEndColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryEndColor' is used in nib 'ChatScreenTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "my_msg_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'my_msg_ic' is used in nib 'ChatSenderTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "incomingMessageBackground", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'incomingMessageBackground' is used in nib 'ChatSenderTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "chatIconImage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chatIconImage' is used in nib 'ChatTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryTextColor' is used in nib 'CommentTableViewCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "secondaryTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'secondaryTextColor' is used in nib 'CommentTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "firstImage1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'firstImage1' is used in nib 'FavoriteCollectionItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryEndColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryEndColor' is used in nib 'FavoriteCollectionItem', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "checkmark") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'checkmark' is used in nib 'FriendRequestTableItem', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "dislike_card_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dislike_card_ic' is used in nib 'FriendRequestTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "firstImage1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'firstImage1' is used in nib 'FriendRequestTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "small_matches_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'small_matches_ic' is used in nib 'FriendRequestTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_close_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_close_white' is used in nib 'HotOrNotCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_explore_location", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_explore_location' is used in nib 'HotOrNotCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_favorite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_favorite' is used in nib 'HotOrNotCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_local_fire_department", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_local_fire_department' is used in nib 'HotOrNotCollectionItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryBackgroundColor' is used in nib 'HotOrNotListCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_close_white", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_close_white' is used in nib 'HotOrNotShowTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_explore_location", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_explore_location' is used in nib 'HotOrNotShowTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_favorite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_favorite' is used in nib 'HotOrNotShowTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_local_fire_department", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_local_fire_department' is used in nib 'HotOrNotShowTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "copy_link_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'copy_link_ic' is used in nib 'InviteFriendsSecondTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gray_next_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gray_next_ic' is used in nib 'InviteFriendsSecondTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryBackgroundColor' is used in nib 'InviteFriendsSecondTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "invite_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'invite_image' is used in nib 'InviteFriendsTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryBackgroundColor' is used in nib 'InviteFriendsTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Unfriend", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Unfriend' is used in nib 'ListFriendCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "firstImage1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'firstImage1' is used in nib 'ListFriendCollectionItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryBackgroundColor' is used in nib 'ListFriendCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "fb_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fb_icon' is used in nib 'LoginTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gplus_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gplus_ic' is used in nib 'LoginTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heartIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heartIcon' is used in nib 'LoginTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "loginBgrImage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'loginBgrImage' is used in nib 'LoginTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_noFav", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_noFav' is used in nib 'NoTrendingDataTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryBackgroundColor' is used in nib 'NoTrendingDataTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "firstImage1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'firstImage1' is used in nib 'OnlineUserCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_circle_explore", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_circle_explore' is used in nib 'OnlineUserCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "firstImage1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'firstImage1' is used in nib 'PeopleIDislikeCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heartArrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heartArrow' is used in nib 'PeopleIDislikeCollectionItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryEndColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryEndColor' is used in nib 'PeopleIDislikeCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "firstImage1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'firstImage1' is used in nib 'PeopleILikeCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heartArrow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heartArrow' is used in nib 'PeopleILikeCollectionItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryEndColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryEndColor' is used in nib 'PeopleILikeCollectionItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryBackgroundColor' is used in nib 'ProUserListCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "boost_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'boost_ic' is used in nib 'ProfileSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "firstImage2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'firstImage2' is used in nib 'ProfileSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_boost_edit_profile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_boost_edit_profile' is used in nib 'ProfileSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_check_verify_circle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_check_verify_circle' is used in nib 'ProfileSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_dimnond", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_dimnond' is used in nib 'ProfileSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_edit_square", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_edit_square' is used in nib 'ProfileSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_favorite_black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_favorite_black' is used in nib 'ProfileSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_home_location_on", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_location_on' is used in nib 'ProfileSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profile_shadow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profile_shadow' is used in nib 'ProfileSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_profile_share", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_profile_share' is used in nib 'ProfileSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_spedo_meter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_spedo_meter' is used in nib 'ProfileSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_star-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_star-1' is used in nib 'ProfileSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_visibility", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_visibility' is used in nib 'ProfileSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "setting_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'setting_ic' is used in nib 'ProfileSectionOneTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "friend_msg_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'friend_msg_ic' is used in nib 'ReceiverImageTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "fb_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fb_icon' is used in nib 'RegisterTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "gplus_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gplus_ic' is used in nib 'RegisterTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "heartIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heartIcon' is used in nib 'RegisterTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "loginBgrImage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'loginBgrImage' is used in nib 'RegisterTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "my_msg_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'my_msg_ic' is used in nib 'SenderImageTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "dislike_card_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dislike_card_ic' is used in nib 'SessionTableItem', but couldn't be loaded.") }
      if UIKit.UIColor(named: "primaryEndColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryEndColor' is used in nib 'SessionTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_expand_more-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_expand_more-1' is used in nib 'SettingsSectionTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_expand_more-1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_expand_more-1' is used in nib 'SettingsSectionTwoTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'ShowUserDetailsCollectionItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in nib 'ShowUserDetailsTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_ant-design_usergroup-add-outlined", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_ant-design_usergroup-add-outlined' is used in nib 'ShowUserDetailsTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_check_verify_circle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_check_verify_circle' is used in nib 'ShowUserDetailsTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_fi-rr-star", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_fi-rr-star' is used in nib 'ShowUserDetailsTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_lucide_gift", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_lucide_gift' is used in nib 'ShowUserDetailsTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_more_vert", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more_vert' is used in nib 'ShowUserDetailsTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "facebooks", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'facebooks' is used in nib 'SocialInfoCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "firstImage1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'firstImage1' is used in nib 'StartTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "firstImage2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'firstImage2' is used in nib 'StartTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_iconHeartPurple", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_iconHeartPurple' is used in nib 'StartTableItem', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_tab_explore", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_tab_explore' is used in nib 'TabView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_tab_local_fire_department", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_tab_local_fire_department' is used in nib 'TabView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_tab_mark_chat_unread", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_tab_mark_chat_unread' is used in nib 'TabView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ic_tab_notifications", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_tab_notifications' is used in nib 'TabView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "firstImage1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'firstImage1' is used in nib 'TrendingCollectionItem', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "heart") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'heart' is used in nib 'TrendingCollectionItem', but couldn't be loaded.") } }
      if UIKit.UIImage(named: "ic_fill_location", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_fill_location' is used in nib 'UserLocationCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "firstImage1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'firstImage1' is used in nib 'notificationTableCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "small_matches_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'small_matches_ic' is used in nib 'notificationTableCell', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 60 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `AboutMeCellID`.
    let aboutMeCellID: RswiftResources.ReuseIdentifier<AboutMeCell> = .init(identifier: "AboutMeCellID")

    /// Reuse identifier `AddStoryCollectionCell`.
    let addStoryCollectionCell: RswiftResources.ReuseIdentifier<AddStoryCollectionCell> = .init(identifier: "AddStoryCollectionCell")

    /// Reuse identifier `BlockUserTableItem`.
    let blockUserTableItem: RswiftResources.ReuseIdentifier<BlockUserTableItem> = .init(identifier: "BlockUserTableItem")

    /// Reuse identifier `BlogViewTableItem`.
    let blogViewTableItem: RswiftResources.ReuseIdentifier<BlogViewTableItem> = .init(identifier: "BlogViewTableItem")

    /// Reuse identifier `BlogsTableCell`.
    let blogsTableCell: RswiftResources.ReuseIdentifier<BlogsTableCell> = .init(identifier: "BlogsTableCell")

    /// Reuse identifier `BuyCreditSectionOneCollectionItem`.
    let buyCreditSectionOneCollectionItem: RswiftResources.ReuseIdentifier<BuyCreditSectionOneCollectionItem> = .init(identifier: "BuyCreditSectionOneCollectionItem")

    /// Reuse identifier `BuyCreditSectionTableItem`.
    let buyCreditSectionTableItem: RswiftResources.ReuseIdentifier<BuyCreditSectionTableItem> = .init(identifier: "BuyCreditSectionTableItem")

    /// Reuse identifier `BuyCreditSectionThreeTableItem`.
    let buyCreditSectionThreeTableItem: RswiftResources.ReuseIdentifier<BuyCreditSectionThreeTableItem> = .init(identifier: "BuyCreditSectionThreeTableItem")

    /// Reuse identifier `BuyCreditSectionTwoCollectionItem`.
    let buyCreditSectionTwoCollectionItem: RswiftResources.ReuseIdentifier<BuyCreditSectionTwoCollectionItem> = .init(identifier: "BuyCreditSectionTwoCollectionItem")

    /// Reuse identifier `BuyCreditSectionTwoTableItem`.
    let buyCreditSectionTwoTableItem: RswiftResources.ReuseIdentifier<BuyCreditSectionTwoTableItem> = .init(identifier: "BuyCreditSectionTwoTableItem")

    /// Reuse identifier `cell`.
    let cell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> = .init(identifier: "cell")

    /// Reuse identifier `ChatReceiverTableItem`.
    let chatReceiverTableItem: RswiftResources.ReuseIdentifier<ChatReceiverTableItem> = .init(identifier: "ChatReceiverTableItem")

    /// Reuse identifier `ChatScreenTableItem`.
    let chatScreenTableItem: RswiftResources.ReuseIdentifier<ChatScreenTableItem> = .init(identifier: "ChatScreenTableItem")

    /// Reuse identifier `ChatSenderTableItem`.
    let chatSenderTableItem: RswiftResources.ReuseIdentifier<ChatSenderTableItem> = .init(identifier: "ChatSenderTableItem")

    /// Reuse identifier `ChatStickerReceiverCell`.
    let chatStickerReceiverCell: RswiftResources.ReuseIdentifier<ChatStickerReceiverCell> = .init(identifier: "ChatStickerReceiverCell")

    /// Reuse identifier `ChatStickerSenderCell`.
    let chatStickerSenderCell: RswiftResources.ReuseIdentifier<ChatStickerSenderCell> = .init(identifier: "ChatStickerSenderCell")

    /// Reuse identifier `ChatTableItem`.
    let chatTableItem: RswiftResources.ReuseIdentifier<ChatTableItem> = .init(identifier: "ChatTableItem")

    /// Reuse identifier `CommentTableViewCell`.
    let commentTableViewCell: RswiftResources.ReuseIdentifier<CommentTableViewCell> = .init(identifier: "CommentTableViewCell")

    /// Reuse identifier `FavoriteCollectionItem`.
    let favoriteCollectionItem: RswiftResources.ReuseIdentifier<FavoriteCollectionItem> = .init(identifier: "FavoriteCollectionItem")

    /// Reuse identifier `FavouritesCellID`.
    let favouritesCellID: RswiftResources.ReuseIdentifier<FavouritesCell> = .init(identifier: "FavouritesCellID")

    /// Reuse identifier `FriendRequestTableItem`.
    let friendRequestTableItem: RswiftResources.ReuseIdentifier<FriendRequestTableItem> = .init(identifier: "FriendRequestTableItem")

    /// Reuse identifier `HotOrNotCollectionItem`.
    let hotOrNotCollectionItem: RswiftResources.ReuseIdentifier<HotOrNotCollectionItem> = .init(identifier: "HotOrNotCollectionItem")

    /// Reuse identifier `HotOrNotShowTableItem`.
    let hotOrNotShowTableItem: RswiftResources.ReuseIdentifier<HotOrNotShowTableItem> = .init(identifier: "HotOrNotShowTableItem")

    /// Reuse identifier `InterestsCellID`.
    let interestsCellID: RswiftResources.ReuseIdentifier<InterestsCell> = .init(identifier: "InterestsCellID")

    /// Reuse identifier `IntroCollectionViewCellID`.
    let introCollectionViewCellID: RswiftResources.ReuseIdentifier<IntroCollectionViewCell> = .init(identifier: "IntroCollectionViewCellID")

    /// Reuse identifier `InviteFriendsSecondTableItem`.
    let inviteFriendsSecondTableItem: RswiftResources.ReuseIdentifier<InviteFriendsSecondTableItem> = .init(identifier: "InviteFriendsSecondTableItem")

    /// Reuse identifier `InviteFriendsTableItem`.
    let inviteFriendsTableItem: RswiftResources.ReuseIdentifier<InviteFriendsTableItem> = .init(identifier: "InviteFriendsTableItem")

    /// Reuse identifier `LifeStyleCellID`.
    let lifeStyleCellID: RswiftResources.ReuseIdentifier<LifeStyleCell> = .init(identifier: "LifeStyleCellID")

    /// Reuse identifier `ListFriendCollectionItem`.
    let listFriendCollectionItem: RswiftResources.ReuseIdentifier<ListFriendCollectionItem> = .init(identifier: "ListFriendCollectionItem")

    /// Reuse identifier `LoginTableItem`.
    let loginTableItem: RswiftResources.ReuseIdentifier<LoginTableItem> = .init(identifier: "LoginTableItem")

    /// Reuse identifier `LooksCellID`.
    let looksCellID: RswiftResources.ReuseIdentifier<LooksCell> = .init(identifier: "LooksCellID")

    /// Reuse identifier `NoTrendingDataTableItem`.
    let noTrendingDataTableItem: RswiftResources.ReuseIdentifier<NoTrendingDataTableItem> = .init(identifier: "NoTrendingDataTableItem")

    /// Reuse identifier `notificationTableCell`.
    let notificationTableCell: RswiftResources.ReuseIdentifier<notificationTableCell> = .init(identifier: "notificationTableCell")

    /// Reuse identifier `OnlineUserCollectionItem`.
    let onlineUserCollectionItem: RswiftResources.ReuseIdentifier<OnlineUserCollectionItem> = .init(identifier: "OnlineUserCollectionItem")

    /// Reuse identifier `PeopleIDislikeCollectionItem`.
    let peopleIDislikeCollectionItem: RswiftResources.ReuseIdentifier<PeopleIDislikeCollectionItem> = .init(identifier: "PeopleIDislikeCollectionItem")

    /// Reuse identifier `PeopleILikeCollectionItem`.
    let peopleILikeCollectionItem: RswiftResources.ReuseIdentifier<PeopleILikeCollectionItem> = .init(identifier: "PeopleILikeCollectionItem")

    /// Reuse identifier `PersonalityCellID`.
    let personalityCellID: RswiftResources.ReuseIdentifier<PersonalityCell> = .init(identifier: "PersonalityCellID")

    /// Reuse identifier `ProfileCompletedPercentsCellID`.
    let profileCompletedPercentsCellID: RswiftResources.ReuseIdentifier<ProfileCompletedPercentsCell> = .init(identifier: "ProfileCompletedPercentsCellID")

    /// Reuse identifier `ProfileImagesCellID`.
    let profileImagesCellID: RswiftResources.ReuseIdentifier<ProfileImagesCell> = .init(identifier: "ProfileImagesCellID")

    /// Reuse identifier `ProfileInfoCellID`.
    let profileInfoCellID: RswiftResources.ReuseIdentifier<ProfileInfoCell> = .init(identifier: "ProfileInfoCellID")

    /// Reuse identifier `ProfileSectionOneTableItem`.
    let profileSectionOneTableItem: RswiftResources.ReuseIdentifier<ProfileSectionOneTableItem> = .init(identifier: "ProfileSectionOneTableItem")

    /// Reuse identifier `profileSectionTwoTableItem`.
    let profileSectionTwoTableItem: RswiftResources.ReuseIdentifier<profileSectionTwoTableItem> = .init(identifier: "profileSectionTwoTableItem")

    /// Reuse identifier `ReceiverImageTableItem`.
    let receiverImageTableItem: RswiftResources.ReuseIdentifier<ReceiverImageTableItem> = .init(identifier: "ReceiverImageTableItem")

    /// Reuse identifier `RegisterTableItem`.
    let registerTableItem: RswiftResources.ReuseIdentifier<RegisterTableItem> = .init(identifier: "RegisterTableItem")

    /// Reuse identifier `SenderImageTableItem`.
    let senderImageTableItem: RswiftResources.ReuseIdentifier<SenderImageTableItem> = .init(identifier: "SenderImageTableItem")

    /// Reuse identifier `SessionTableItem`.
    let sessionTableItem: RswiftResources.ReuseIdentifier<SessionTableItem> = .init(identifier: "SessionTableItem")

    /// Reuse identifier `SettingsSectionTableItem`.
    let settingsSectionTableItem: RswiftResources.ReuseIdentifier<SettingsSectionTableItem> = .init(identifier: "SettingsSectionTableItem")

    /// Reuse identifier `SettingsSectionThreeTableItem`.
    let settingsSectionThreeTableItem: RswiftResources.ReuseIdentifier<SettingsSectionThreeTableItem> = .init(identifier: "SettingsSectionThreeTableItem")

    /// Reuse identifier `SettingsSectionTwoTableItem`.
    let settingsSectionTwoTableItem: RswiftResources.ReuseIdentifier<SettingsSectionTwoTableItem> = .init(identifier: "SettingsSectionTwoTableItem")

    /// Reuse identifier `ShowBlogSectionOneTableItem`.
    let showBlogSectionOneTableItem: RswiftResources.ReuseIdentifier<ShowBlogSectionOneTableItem> = .init(identifier: "ShowBlogSectionOneTableItem")

    /// Reuse identifier `ShowBlogSectionTwoTableItem`.
    let showBlogSectionTwoTableItem: RswiftResources.ReuseIdentifier<ShowBlogSectionTwoTableItem> = .init(identifier: "ShowBlogSectionTwoTableItem")

    /// Reuse identifier `ShowUserDetailsCollectionItem`.
    let showUserDetailsCollectionItem: RswiftResources.ReuseIdentifier<ShowUserDetailsCollectionItem> = .init(identifier: "ShowUserDetailsCollectionItem")

    /// Reuse identifier `ShowUserDetailsTableItem`.
    let showUserDetailsTableItem: RswiftResources.ReuseIdentifier<ShowUserDetailsTableItem> = .init(identifier: "ShowUserDetailsTableItem")

    /// Reuse identifier `SocialInfoCell`.
    let socialInfoCell: RswiftResources.ReuseIdentifier<SocialInfoCell> = .init(identifier: "SocialInfoCell")

    /// Reuse identifier `StartTableItem`.
    let startTableItem: RswiftResources.ReuseIdentifier<StartTableItem> = .init(identifier: "StartTableItem")

    /// Reuse identifier `TrendingCollectionItem`.
    let trendingCollectionItem: RswiftResources.ReuseIdentifier<TrendingCollectionItem> = .init(identifier: "TrendingCollectionItem")

    /// Reuse identifier `UpgradeAccountCollectionItem`.
    let upgradeAccountCollectionItem: RswiftResources.ReuseIdentifier<UpgradeAccountCollectionItem> = .init(identifier: "UpgradeAccountCollectionItem")

    /// Reuse identifier `UserAboutCell`.
    let userAboutCell: RswiftResources.ReuseIdentifier<UserAboutCell> = .init(identifier: "UserAboutCell")

    /// Reuse identifier `UserImagesCell`.
    let userImagesCell: RswiftResources.ReuseIdentifier<UserImagesCell> = .init(identifier: "UserImagesCell")

    /// Reuse identifier `UserIntroCell`.
    let userIntroCell: RswiftResources.ReuseIdentifier<UserIntroCell> = .init(identifier: "UserIntroCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 13 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var authentication: authentication { .init(bundle: bundle) }
    var blogs: blogs { .init(bundle: bundle) }
    var call: call { .init(bundle: bundle) }
    var chat: chat { .init(bundle: bundle) }
    var credit: credit { .init(bundle: bundle) }
    var dashboard: dashboard { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var live: live { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }
    var onlineFeature: onlineFeature { .init(bundle: bundle) }
    var popUps: popUps { .init(bundle: bundle) }
    var settings: settings { .init(bundle: bundle) }
    var trending: trending { .init(bundle: bundle) }

    func authentication(bundle: Foundation.Bundle) -> authentication {
      .init(bundle: bundle)
    }
    func blogs(bundle: Foundation.Bundle) -> blogs {
      .init(bundle: bundle)
    }
    func call(bundle: Foundation.Bundle) -> call {
      .init(bundle: bundle)
    }
    func chat(bundle: Foundation.Bundle) -> chat {
      .init(bundle: bundle)
    }
    func credit(bundle: Foundation.Bundle) -> credit {
      .init(bundle: bundle)
    }
    func dashboard(bundle: Foundation.Bundle) -> dashboard {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func live(bundle: Foundation.Bundle) -> live {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func onlineFeature(bundle: Foundation.Bundle) -> onlineFeature {
      .init(bundle: bundle)
    }
    func popUps(bundle: Foundation.Bundle) -> popUps {
      .init(bundle: bundle)
    }
    func settings(bundle: Foundation.Bundle) -> settings {
      .init(bundle: bundle)
    }
    func trending(bundle: Foundation.Bundle) -> trending {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.authentication.validate()
      try self.blogs.validate()
      try self.call.validate()
      try self.chat.validate()
      try self.credit.validate()
      try self.dashboard.validate()
      try self.launchScreen.validate()
      try self.live.validate()
      try self.main.validate()
      try self.onlineFeature.validate()
      try self.popUps.validate()
      try self.settings.validate()
      try self.trending.validate()
    }


    /// Storyboard `Authentication`.
    struct authentication: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = SplashScreenVC

      let bundle: Foundation.Bundle

      let name = "Authentication"

      var forgetPasswordVC: RswiftResources.StoryboardViewControllerIdentifier<ForgetPasswordVC> { .init(identifier: "ForgetPasswordVC", storyboard: name, bundle: bundle) }
      var introViewController: RswiftResources.StoryboardViewControllerIdentifier<IntroViewController> { .init(identifier: "IntroViewController", storyboard: name, bundle: bundle) }
      var loginVC: RswiftResources.StoryboardViewControllerIdentifier<LoginVC> { .init(identifier: "LoginVC", storyboard: name, bundle: bundle) }
      var loginViewController: RswiftResources.StoryboardViewControllerIdentifier<LoginViewController> { .init(identifier: "LoginViewController", storyboard: name, bundle: bundle) }
      var loginWithWoWonderVC: RswiftResources.StoryboardViewControllerIdentifier<LoginWithWoWonderVC> { .init(identifier: "LoginWithWoWonderVC", storyboard: name, bundle: bundle) }
      var main: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "main", storyboard: name, bundle: bundle) }
      var newStartViewController: RswiftResources.StoryboardViewControllerIdentifier<NewStartViewController> { .init(identifier: "NewStartViewController", storyboard: name, bundle: bundle) }
      var registerVC: RswiftResources.StoryboardViewControllerIdentifier<RegisterVC> { .init(identifier: "RegisterVC", storyboard: name, bundle: bundle) }
      var registerViewController: RswiftResources.StoryboardViewControllerIdentifier<RegisterViewController> { .init(identifier: "RegisterViewController", storyboard: name, bundle: bundle) }
      var registerViewController1: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UIViewController> { .init(identifier: "RegisterViewController1", storyboard: name, bundle: bundle) }
      var splashNewViewController: RswiftResources.StoryboardViewControllerIdentifier<SplashNewViewController> { .init(identifier: "SplashNewViewController", storyboard: name, bundle: bundle) }
      var splashScreenVC: RswiftResources.StoryboardViewControllerIdentifier<SplashScreenVC> { .init(identifier: "SplashScreenVC", storyboard: name, bundle: bundle) }
      var startVC: RswiftResources.StoryboardViewControllerIdentifier<StartVC> { .init(identifier: "StartVC", storyboard: name, bundle: bundle) }
      var startViewController: RswiftResources.StoryboardViewControllerIdentifier<StartViewController> { .init(identifier: "StartViewController", storyboard: name, bundle: bundle) }
      var twoFactorVC: RswiftResources.StoryboardViewControllerIdentifier<TwoFactorVC> { .init(identifier: "TwoFactorVC", storyboard: name, bundle: bundle) }
      var verifyEmailVC: RswiftResources.StoryboardViewControllerIdentifier<VerifyEmailVC> { .init(identifier: "VerifyEmailVC", storyboard: name, bundle: bundle) }
      var verifyPhoneNumberVC: RswiftResources.StoryboardViewControllerIdentifier<VerifyPhoneNumberVC> { .init(identifier: "VerifyPhoneNumberVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Logo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Logo' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "applelogo") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'applelogo' is used in storyboard 'Authentication', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.left") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'arrow.left' is used in storyboard 'Authentication', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "back_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_ic' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bottom right gradient", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bottom right gradient' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button gradient", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'button gradient' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.left") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.left' is used in storyboard 'Authentication', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'eye' is used in storyboard 'Authentication', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "facebook25px", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'facebook25px' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "firstImage1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'firstImage1' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "firstImage2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'firstImage2' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "googleLogo24px", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'googleLogo24px' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gray_back_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gray_back_ic' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heartIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'heartIcon' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_auth_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_auth_bg' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_birthday", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_birthday' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_continue_with", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_continue_with' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_expand_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_expand_more' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_fb_login", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_fb_login' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_gender", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_gender' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_get_started", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_get_started' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_google_login", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_google_login' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_heart_vector", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_heart_vector' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_iconHeartPurple", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_iconHeartPurple' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_login_text", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_login_text' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_new_email_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_new_email_icon' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_new_password_icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_new_password_icon' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_password_show", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_password_show' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_splace_bg_top", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_splace_bg_top' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_splash", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_splash' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_top_register", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_top_register' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_user' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_wowonder_login", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_wowonder_login' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loginBackground", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'loginBackground' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loginBgrImage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'loginBgrImage' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_WoWonder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'logo_WoWonder' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "multiplyIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'multiplyIcon' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "next_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'next_ic' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "onboarding_ic_1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'onboarding_ic_1' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "top right gradient", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'top right gradient' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "twoFactor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'twoFactor' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "verify_img", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'verify_img' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIImage(named: "woWonderLogo", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'woWonderLogo' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if UIKit.UIColor(named: "secondaryTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'secondaryTextColor' is used in storyboard 'Authentication', but couldn't be loaded.") }
        if forgetPasswordVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'forgetPasswordVC' could not be loaded from storyboard 'Authentication' as 'ForgetPasswordVC'.") }
        if introViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'introViewController' could not be loaded from storyboard 'Authentication' as 'IntroViewController'.") }
        if loginVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Authentication' as 'LoginVC'.") }
        if loginViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Authentication' as 'LoginViewController'.") }
        if loginWithWoWonderVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'loginWithWoWonderVC' could not be loaded from storyboard 'Authentication' as 'LoginWithWoWonderVC'.") }
        if newStartViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'newStartViewController' could not be loaded from storyboard 'Authentication' as 'NewStartViewController'.") }
        if registerVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'registerVC' could not be loaded from storyboard 'Authentication' as 'RegisterVC'.") }
        if registerViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'registerViewController' could not be loaded from storyboard 'Authentication' as 'RegisterViewController'.") }
        if registerViewController1() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'registerViewController1' could not be loaded from storyboard 'Authentication' as 'UIKit.UIViewController'.") }
        if splashNewViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'splashNewViewController' could not be loaded from storyboard 'Authentication' as 'SplashNewViewController'.") }
        if splashScreenVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'splashScreenVC' could not be loaded from storyboard 'Authentication' as 'SplashScreenVC'.") }
        if startVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'startVC' could not be loaded from storyboard 'Authentication' as 'StartVC'.") }
        if startViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'startViewController' could not be loaded from storyboard 'Authentication' as 'StartViewController'.") }
        if twoFactorVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'twoFactorVC' could not be loaded from storyboard 'Authentication' as 'TwoFactorVC'.") }
        if verifyEmailVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'verifyEmailVC' could not be loaded from storyboard 'Authentication' as 'VerifyEmailVC'.") }
        if verifyPhoneNumberVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'verifyPhoneNumberVC' could not be loaded from storyboard 'Authentication' as 'VerifyPhoneNumberVC'.") }
        if main() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'main' could not be loaded from storyboard 'Authentication' as 'UIKit.UINavigationController'.") }
      }
    }

    /// Storyboard `Blogs`.
    struct blogs: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = BlogsVC

      let bundle: Foundation.Bundle

      let name = "Blogs"

      var blogsVC: RswiftResources.StoryboardViewControllerIdentifier<BlogsVC> { .init(identifier: "BlogsVC", storyboard: name, bundle: bundle) }
      var showBlogVC: RswiftResources.StoryboardViewControllerIdentifier<ShowBlogVC> { .init(identifier: "ShowBlogVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "gray_back_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gray_back_ic' is used in storyboard 'Blogs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_auth_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_auth_bg' is used in storyboard 'Blogs', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'menu_ic' is used in storyboard 'Blogs', but couldn't be loaded.") }
        if UIKit.UIColor(named: "primaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryBackgroundColor' is used in storyboard 'Blogs', but couldn't be loaded.") }
        if UIKit.UIColor(named: "primaryTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryTextColor' is used in storyboard 'Blogs', but couldn't be loaded.") }
        if blogsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'blogsVC' could not be loaded from storyboard 'Blogs' as 'BlogsVC'.") }
        if showBlogVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'showBlogVC' could not be loaded from storyboard 'Blogs' as 'ShowBlogVC'.") }
      }
    }

    /// Storyboard `Call`.
    struct call: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Call"

      var callVC: RswiftResources.StoryboardViewControllerIdentifier<CallVC> { .init(identifier: "CallVC", storyboard: name, bundle: bundle) }
      var incomingCallVC: RswiftResources.StoryboardViewControllerIdentifier<IncomingCallController> { .init(identifier: "IncomingCallVC", storyboard: name, bundle: bundle) }
      var tempVCalling: RswiftResources.StoryboardViewControllerIdentifier<TempVCalling> { .init(identifier: "TempVCalling", storyboard: name, bundle: bundle) }
      var videoCallVC: RswiftResources.StoryboardViewControllerIdentifier<VideoCallVC> { .init(identifier: "VideoCallVC", storyboard: name, bundle: bundle) }
      var voiceCallVC: RswiftResources.StoryboardViewControllerIdentifier<VoiceCallVC> { .init(identifier: "VoiceCallVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "btn_mute_blue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'btn_mute_blue' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_speaker_blue", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'btn_speaker_blue' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "call-end", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'call-end' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "hangUpButton", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'hangUpButton' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "localVideoMutedBg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'localVideoMutedBg' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mute", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'mute' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "muteButton", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'muteButton' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "muteButtonSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'muteButtonSelected' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "no_profile_image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'no_profile_image' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "phone-call", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'phone-call' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "switchCameraButton", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'switchCameraButton' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "switchCameraButtonSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'switchCameraButtonSelected' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "videoMuteButton", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'videoMuteButton' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "videoMuteButtonSelected", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'videoMuteButtonSelected' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "videoMutedIndicator", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'videoMutedIndicator' is used in storyboard 'Call', but couldn't be loaded.") }
        if UIKit.UIImage(named: "voice", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'voice' is used in storyboard 'Call', but couldn't be loaded.") }
        if callVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'callVC' could not be loaded from storyboard 'Call' as 'CallVC'.") }
        if incomingCallVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'incomingCallVC' could not be loaded from storyboard 'Call' as 'IncomingCallController'.") }
        if tempVCalling() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'tempVCalling' could not be loaded from storyboard 'Call' as 'TempVCalling'.") }
        if videoCallVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'videoCallVC' could not be loaded from storyboard 'Call' as 'VideoCallVC'.") }
        if voiceCallVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'voiceCallVC' could not be loaded from storyboard 'Call' as 'VoiceCallVC'.") }
      }
    }

    /// Storyboard `Chat`.
    struct chat: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Chat"

      var chatScreenVC: RswiftResources.StoryboardViewControllerIdentifier<ChatScreenVC> { .init(identifier: "ChatScreenVC", storyboard: name, bundle: bundle) }
      var stickersViewController: RswiftResources.StoryboardViewControllerIdentifier<StickersViewController> { .init(identifier: "StickersViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "backIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'backIcon' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chatBackground", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chatBackground' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_audio_calling", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_audio_calling' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat_gift", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_chat_gift' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat_mood", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_chat_mood' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chat_photo_camera", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_chat_photo_camera' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_more_vert", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_more_vert' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_property", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_property' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_video_calling", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_video_calling' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIImage(named: "send_msg_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'send_msg_ic' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "primaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryBackgroundColor' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "primaryEndColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryEndColor' is used in storyboard 'Chat', but couldn't be loaded.") }
        if UIKit.UIColor(named: "primaryTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryTextColor' is used in storyboard 'Chat', but couldn't be loaded.") }
        if chatScreenVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatScreenVC' could not be loaded from storyboard 'Chat' as 'ChatScreenVC'.") }
        if stickersViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'stickersViewController' could not be loaded from storyboard 'Chat' as 'StickersViewController'.") }
      }
    }

    /// Storyboard `Credit`.
    struct credit: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Credit"

      var bankTransferVC: RswiftResources.StoryboardViewControllerIdentifier<BankTransferVC> { .init(identifier: "BankTransferVC", storyboard: name, bundle: bundle) }
      var buyCreditVC: RswiftResources.StoryboardViewControllerIdentifier<BuyCreditVC> { .init(identifier: "BuyCreditVC", storyboard: name, bundle: bundle) }
      var iyziPayViewController: RswiftResources.StoryboardViewControllerIdentifier<IyziPayViewController> { .init(identifier: "IyziPayViewController", storyboard: name, bundle: bundle) }
      var payVC: RswiftResources.StoryboardViewControllerIdentifier<PayVC> { .init(identifier: "PayVC", storyboard: name, bundle: bundle) }
      var paymentOpetionViewController: RswiftResources.StoryboardViewControllerIdentifier<PaymentOpetionViewController> { .init(identifier: "PaymentOpetionViewController", storyboard: name, bundle: bundle) }
      var upgradeAccountVC: RswiftResources.StoryboardViewControllerIdentifier<UpgradeAccountVC> { .init(identifier: "UpgradeAccountVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "ImagePlacholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ImagePlacholder' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrowBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'arrowBack' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dislike_card_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dislike_card_ic' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gray_back_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gray_back_ic' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_authorizeNet", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_authorizeNet' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_black", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_back_black' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_copper_card", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_copper_card' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_fluent_building-bank-16-regular", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_fluent_building-bank-16-regular' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_bg' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_iyziPay", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_iyziPay' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logos_visa", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_logos_visa' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_no_credit_card", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_no_credit_card' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_payment_next", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_payment_next' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_paypal", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_paypal' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_razorPay", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_razorPay' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_securionPay", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_securionPay' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_upgred_1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_upgred_1' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_upgred_2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_upgred_2' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_upgred_3", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_upgred_3' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_upgred_4", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_upgred_4' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_upgred_5", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_upgred_5' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_upgred_6", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_upgred_6' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_upgred_7", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_upgred_7' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIColor(named: "primaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryBackgroundColor' is used in storyboard 'Credit', but couldn't be loaded.") }
        if UIKit.UIColor(named: "primaryEndColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryEndColor' is used in storyboard 'Credit', but couldn't be loaded.") }
        if bankTransferVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'bankTransferVC' could not be loaded from storyboard 'Credit' as 'BankTransferVC'.") }
        if buyCreditVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'buyCreditVC' could not be loaded from storyboard 'Credit' as 'BuyCreditVC'.") }
        if iyziPayViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'iyziPayViewController' could not be loaded from storyboard 'Credit' as 'IyziPayViewController'.") }
        if payVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'payVC' could not be loaded from storyboard 'Credit' as 'PayVC'.") }
        if paymentOpetionViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'paymentOpetionViewController' could not be loaded from storyboard 'Credit' as 'PaymentOpetionViewController'.") }
        if upgradeAccountVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'upgradeAccountVC' could not be loaded from storyboard 'Credit' as 'UpgradeAccountVC'.") }
      }
    }

    /// Storyboard `Dashboard`.
    struct dashboard: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Dashboard"

      var dashboardFilterViewController: RswiftResources.StoryboardViewControllerIdentifier<DashboardFilterViewController> { .init(identifier: "DashboardFilterViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "button gradient", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'button gradient' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_close", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_close' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_date", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_date' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_expand_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_expand_more' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_online", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_online' is used in storyboard 'Dashboard', but couldn't be loaded.") }
        if dashboardFilterViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'dashboardFilterViewController' could not be loaded from storyboard 'Dashboard' as 'DashboardFilterViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "ic_heart_vector", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_heart_vector' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_splash", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_splash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `Live`.
    struct live: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Live"

      var liveStreamViewController: RswiftResources.StoryboardViewControllerIdentifier<LiveStreamViewController> { .init(identifier: "LiveStreamViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "bg2", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bg2' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIImage(named: "magicIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'magicIcon' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIImage(named: "micIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'micIcon' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIImage(named: "multiplyIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'multiplyIcon' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sendMessageIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'sendMessageIcon' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIImage(named: "switchCameraIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'switchCameraIcon' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIImage(named: "videoMuteIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'videoMuteIcon' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIColor(named: "primaryTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryTextColor' is used in storyboard 'Live', but couldn't be loaded.") }
        if UIKit.UIColor(named: "secondaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'secondaryBackgroundColor' is used in storyboard 'Live', but couldn't be loaded.") }
        if liveStreamViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'liveStreamViewController' could not be loaded from storyboard 'Live' as 'LiveStreamViewController'.") }
      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Main"

      var boostVC: RswiftResources.StoryboardViewControllerIdentifier<BoostVC> { .init(identifier: "BoostVC", storyboard: name, bundle: bundle) }
      var chatNav: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "ChatNav", storyboard: name, bundle: bundle) }
      var chatVC: RswiftResources.StoryboardViewControllerIdentifier<ChatVC> { .init(identifier: "ChatVC", storyboard: name, bundle: bundle) }
      var dashboardViewController: RswiftResources.StoryboardViewControllerIdentifier<DashboardViewController> { .init(identifier: "DashboardViewController", storyboard: name, bundle: bundle) }
      var exploreNav: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "ExploreNav", storyboard: name, bundle: bundle) }
      var homeNav: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "HomeNav", storyboard: name, bundle: bundle) }
      var likesVC: RswiftResources.StoryboardViewControllerIdentifier<LikesVC> { .init(identifier: "LikesVC", storyboard: name, bundle: bundle) }
      var matchesVC: RswiftResources.StoryboardViewControllerIdentifier<MatchesVC> { .init(identifier: "MatchesVC", storyboard: name, bundle: bundle) }
      var notificationNav: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "NotificationNav", storyboard: name, bundle: bundle) }
      var notificationVC: RswiftResources.StoryboardViewControllerIdentifier<NotificationVC> { .init(identifier: "NotificationVC", storyboard: name, bundle: bundle) }
      var profileNav: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "ProfileNav", storyboard: name, bundle: bundle) }
      var profileVC: RswiftResources.StoryboardViewControllerIdentifier<ProfileVC> { .init(identifier: "ProfileVC", storyboard: name, bundle: bundle) }
      var requestVC: RswiftResources.StoryboardViewControllerIdentifier<RequestVC> { .init(identifier: "RequestVC", storyboard: name, bundle: bundle) }
      var showImageController: RswiftResources.StoryboardViewControllerIdentifier<ShowImageController> { .init(identifier: "ShowImageController", storyboard: name, bundle: bundle) }
      var showUserDetailsViewController: RswiftResources.StoryboardViewControllerIdentifier<ShowUserDetailsViewController> { .init(identifier: "ShowUserDetailsViewController", storyboard: name, bundle: bundle) }
      var trendingVC: RswiftResources.StoryboardViewControllerIdentifier<TrendingVC> { .init(identifier: "TrendingVC", storyboard: name, bundle: bundle) }
      var visitsVC: RswiftResources.StoryboardViewControllerIdentifier<VisitsVC> { .init(identifier: "VisitsVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Verified", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Verified' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrowBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'arrowBack' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'back_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bellss", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'bellss' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cards", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'cards' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chevronUp", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chevronUp' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fires", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'fires' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_auth_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_auth_bg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cele", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cele' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_expand_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_expand_more' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_filter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_filter' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_fire", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_fire' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_bg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_circle", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_circle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_delete", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_delete' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_favorite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_favorite' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_filter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_filter' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_location_on", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_location_on' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_proverty", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_proverty' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_reload", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_reload' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_noChat", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_noChat' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_noNotification", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_noNotification' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_property", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_property' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_proverty", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_proverty' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_roind_white_black_back", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_roind_white_black_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_signal", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_signal' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "like_card_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'like_card_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "messagesIcon24px", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'messagesIcon24px' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "personFillTabBar24px", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'personFillTabBar24px' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "personTabBar24px", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'personTabBar24px' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "speedometer_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'speedometer_ic' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIColor(named: "primaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryBackgroundColor' is used in storyboard 'Main', but couldn't be loaded.") }
        if boostVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'boostVC' could not be loaded from storyboard 'Main' as 'BoostVC'.") }
        if chatNav() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if chatVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'chatVC' could not be loaded from storyboard 'Main' as 'ChatVC'.") }
        if dashboardViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'dashboardViewController' could not be loaded from storyboard 'Main' as 'DashboardViewController'.") }
        if exploreNav() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'exploreNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if homeNav() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'homeNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if likesVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'likesVC' could not be loaded from storyboard 'Main' as 'LikesVC'.") }
        if matchesVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'matchesVC' could not be loaded from storyboard 'Main' as 'MatchesVC'.") }
        if notificationNav() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'notificationNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if notificationVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'notificationVC' could not be loaded from storyboard 'Main' as 'NotificationVC'.") }
        if profileNav() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'profileNav' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if profileVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'profileVC' could not be loaded from storyboard 'Main' as 'ProfileVC'.") }
        if requestVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'requestVC' could not be loaded from storyboard 'Main' as 'RequestVC'.") }
        if showImageController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'showImageController' could not be loaded from storyboard 'Main' as 'ShowImageController'.") }
        if showUserDetailsViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'showUserDetailsViewController' could not be loaded from storyboard 'Main' as 'ShowUserDetailsViewController'.") }
        if trendingVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'trendingVC' could not be loaded from storyboard 'Main' as 'TrendingVC'.") }
        if visitsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'visitsVC' could not be loaded from storyboard 'Main' as 'VisitsVC'.") }
      }
    }

    /// Storyboard `OnlineFeature`.
    struct onlineFeature: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "OnlineFeature"

      var onlineFeatureVC: RswiftResources.StoryboardViewControllerIdentifier<OnlineFeatureViewController> { .init(identifier: "OnlineFeatureVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if onlineFeatureVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'onlineFeatureVC' could not be loaded from storyboard 'OnlineFeature' as 'OnlineFeatureViewController'.") }
      }
    }

    /// Storyboard `PopUps`.
    struct popUps: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "PopUps"

      var aboutMePopUpVC: RswiftResources.StoryboardViewControllerIdentifier<AboutMePopUpVC> { .init(identifier: "AboutMePopUpVC", storyboard: name, bundle: bundle) }
      var customAlertViewController: RswiftResources.StoryboardViewControllerIdentifier<CustomAlertViewController> { .init(identifier: "CustomAlertViewController", storyboard: name, bundle: bundle) }
      var interestPopUpVC: RswiftResources.StoryboardViewControllerIdentifier<InterestPopUpVC> { .init(identifier: "InterestPopUpVC", storyboard: name, bundle: bundle) }
      var languagePopUpVC: RswiftResources.StoryboardViewControllerIdentifier<LanguagePopUpVC> { .init(identifier: "LanguagePopUpVC", storyboard: name, bundle: bundle) }
      var noInternetViewController: RswiftResources.StoryboardViewControllerIdentifier<NoInternetViewController> { .init(identifier: "NoInternetViewController", storyboard: name, bundle: bundle) }
      var premiumPopupVC: RswiftResources.StoryboardViewControllerIdentifier<PremiumPopupVC> { .init(identifier: "PremiumPopupVC", storyboard: name, bundle: bundle) }
      var profileEditPopUpVC: RswiftResources.StoryboardViewControllerIdentifier<ProfileEditPopUpVC> { .init(identifier: "ProfileEditPopUpVC", storyboard: name, bundle: bundle) }
      var selectGenderPopUpViewController: RswiftResources.StoryboardViewControllerIdentifier<SelectGenderPopUpViewController> { .init(identifier: "SelectGenderPopUpViewController", storyboard: name, bundle: bundle) }
      var selectPaymentVC: RswiftResources.StoryboardViewControllerIdentifier<SelectPaymentVC> { .init(identifier: "SelectPaymentVC", storyboard: name, bundle: bundle) }
      var tutorialViewVC: RswiftResources.StoryboardViewControllerIdentifier<TutorialViewVC> { .init(identifier: "TutorialViewVC", storyboard: name, bundle: bundle) }
      var unblockUserPopUpVC: RswiftResources.StoryboardViewControllerIdentifier<UnblockUserPopUpVC> { .init(identifier: "UnblockUserPopUpVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "cloud.bolt.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'cloud.bolt.fill' is used in storyboard 'PopUps', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "trophy", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'trophy' is used in storyboard 'PopUps', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorial_ic_1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'tutorial_ic_1' is used in storyboard 'PopUps', but couldn't be loaded.") }
        if aboutMePopUpVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'aboutMePopUpVC' could not be loaded from storyboard 'PopUps' as 'AboutMePopUpVC'.") }
        if customAlertViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'customAlertViewController' could not be loaded from storyboard 'PopUps' as 'CustomAlertViewController'.") }
        if interestPopUpVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'interestPopUpVC' could not be loaded from storyboard 'PopUps' as 'InterestPopUpVC'.") }
        if languagePopUpVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'languagePopUpVC' could not be loaded from storyboard 'PopUps' as 'LanguagePopUpVC'.") }
        if noInternetViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'noInternetViewController' could not be loaded from storyboard 'PopUps' as 'NoInternetViewController'.") }
        if premiumPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'premiumPopupVC' could not be loaded from storyboard 'PopUps' as 'PremiumPopupVC'.") }
        if profileEditPopUpVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'profileEditPopUpVC' could not be loaded from storyboard 'PopUps' as 'ProfileEditPopUpVC'.") }
        if selectGenderPopUpViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'selectGenderPopUpViewController' could not be loaded from storyboard 'PopUps' as 'SelectGenderPopUpViewController'.") }
        if selectPaymentVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'selectPaymentVC' could not be loaded from storyboard 'PopUps' as 'SelectPaymentVC'.") }
        if tutorialViewVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'tutorialViewVC' could not be loaded from storyboard 'PopUps' as 'TutorialViewVC'.") }
        if unblockUserPopUpVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'unblockUserPopUpVC' could not be loaded from storyboard 'PopUps' as 'UnblockUserPopUpVC'.") }
      }
    }

    /// Storyboard `Settings`.
    struct settings: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Settings"

      var blockUserVC: RswiftResources.StoryboardViewControllerIdentifier<BlockUserVC> { .init(identifier: "BlockUserVC", storyboard: name, bundle: bundle) }
      var changePasswordVC: RswiftResources.StoryboardViewControllerIdentifier<ChangePasswordVC> { .init(identifier: "ChangePasswordVC", storyboard: name, bundle: bundle) }
      var deleteAccountVC: RswiftResources.StoryboardViewControllerIdentifier<DeleteAccountVC> { .init(identifier: "DeleteAccountVC", storyboard: name, bundle: bundle) }
      var dislikeUsersVC: RswiftResources.StoryboardViewControllerIdentifier<DislikeUsersVC> { .init(identifier: "DislikeUsersVC", storyboard: name, bundle: bundle) }
      var editFavouritesVC: RswiftResources.StoryboardViewControllerIdentifier<EditFavouritesVC> { .init(identifier: "EditFavouritesVC", storyboard: name, bundle: bundle) }
      var editLifeStyleVC: RswiftResources.StoryboardViewControllerIdentifier<EditLifeStyleVC> { .init(identifier: "EditLifeStyleVC", storyboard: name, bundle: bundle) }
      var editLooksVC: RswiftResources.StoryboardViewControllerIdentifier<EditLooksVC> { .init(identifier: "EditLooksVC", storyboard: name, bundle: bundle) }
      var editPersonalityVC: RswiftResources.StoryboardViewControllerIdentifier<EditPersonalityVC> { .init(identifier: "EditPersonalityVC", storyboard: name, bundle: bundle) }
      var editProfileVC: RswiftResources.StoryboardViewControllerIdentifier<EditProfileVC> { .init(identifier: "EditProfileVC", storyboard: name, bundle: bundle) }
      var favoriteVC: RswiftResources.StoryboardViewControllerIdentifier<FavoriteVC> { .init(identifier: "FavoriteVC", storyboard: name, bundle: bundle) }
      var helpVC: RswiftResources.StoryboardViewControllerIdentifier<HelpVC> { .init(identifier: "HelpVC", storyboard: name, bundle: bundle) }
      var inviteFriendsVC: RswiftResources.StoryboardViewControllerIdentifier<InviteFriendsVC> { .init(identifier: "InviteFriendsVC", storyboard: name, bundle: bundle) }
      var likedUsersVC: RswiftResources.StoryboardViewControllerIdentifier<LikedUsersVC> { .init(identifier: "LikedUsersVC", storyboard: name, bundle: bundle) }
      var listFriendsVC: RswiftResources.StoryboardViewControllerIdentifier<ListFriendsVC> { .init(identifier: "ListFriendsVC", storyboard: name, bundle: bundle) }
      var mapController: RswiftResources.StoryboardViewControllerIdentifier<MapController> { .init(identifier: "MapController", storyboard: name, bundle: bundle) }
      var myAccountVC: RswiftResources.StoryboardViewControllerIdentifier<MyAccountVC> { .init(identifier: "MyAccountVC", storyboard: name, bundle: bundle) }
      var myAffliatesVC: RswiftResources.StoryboardViewControllerIdentifier<MyAffliatesVC> { .init(identifier: "MyAffliatesVC", storyboard: name, bundle: bundle) }
      var profileVC: RswiftResources.StoryboardViewControllerIdentifier<profileVC> { .init(identifier: "profileVC", storyboard: name, bundle: bundle) }
      var sessionsVC: RswiftResources.StoryboardViewControllerIdentifier<SessionsVC> { .init(identifier: "SessionsVC", storyboard: name, bundle: bundle) }
      var settingsVC: RswiftResources.StoryboardViewControllerIdentifier<SettingsVC> { .init(identifier: "SettingsVC", storyboard: name, bundle: bundle) }
      var socialLinkVC: RswiftResources.StoryboardViewControllerIdentifier<SocialLinkVC> { .init(identifier: "SocialLinkVC", storyboard: name, bundle: bundle) }
      var transactionsListViewController: RswiftResources.StoryboardViewControllerIdentifier<TransactionsListViewController> { .init(identifier: "TransactionsListViewController", storyboard: name, bundle: bundle) }
      var twoFactorUpdateVC: RswiftResources.StoryboardViewControllerIdentifier<TwoFactorUpdateVC> { .init(identifier: "TwoFactorUpdateVC", storyboard: name, bundle: bundle) }
      var updateTwoFactorSettingPopupVC: RswiftResources.StoryboardViewControllerIdentifier<UpdateTwoFactorSettingPopupVC> { .init(identifier: "UpdateTwoFactorSettingPopupVC", storyboard: name, bundle: bundle) }
      var withdrawalsVC: RswiftResources.StoryboardViewControllerIdentifier<WithdrawalsVC> { .init(identifier: "WithdrawalsVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "backIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'backIcon' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button gradient", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'button gradient' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "country_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'country_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "dislike_card_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'dislike_card_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "edit_profile_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'edit_profile_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'email_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'facebook_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "google_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'google_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gray_back_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'gray_back_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_add' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_auth_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_auth_bg' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_baby", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_baby' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_body", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_body' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_book", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_book' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_briefcase", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_briefcase' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_building", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_building' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cake", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cake' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_car", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_car' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cat", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cat' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cigrette", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_cigrette' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_color' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_drink", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_drink' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_education", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_education' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_expand_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_expand_more' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_faces", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_faces' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_fish", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_fish' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_flim", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_flim' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_football", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_football' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_globe", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_globe' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_heart", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_heart' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_height", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_height' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_bg' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_language", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_language' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_location", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_location' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_music", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_music' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_ninja", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_ninja' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_noFav", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_noFav' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_peopleBlack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_peopleBlack' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_radioOff", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_radioOff' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_religion", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_religion' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_transgender", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_transgender' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_travel", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_travel' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_tvShow", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_tvShow' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ie_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ie_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "insta_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'insta_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "linkedin_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'linkedin_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "location_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'location_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "magnifyingglass") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'magnifyingglass' is used in storyboard 'Settings', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "my_affiliates", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'my_affiliates' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "phone_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'phone_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "security", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'security' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "thumbnail", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'thumbnail' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "twitter_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'twitter_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "username_ic", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'username_ic' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "primaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryBackgroundColor' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "primaryEndColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryEndColor' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIColor(named: "secondaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'secondaryBackgroundColor' is used in storyboard 'Settings', but couldn't be loaded.") }
        if blockUserVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'blockUserVC' could not be loaded from storyboard 'Settings' as 'BlockUserVC'.") }
        if changePasswordVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Settings' as 'ChangePasswordVC'.") }
        if deleteAccountVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'deleteAccountVC' could not be loaded from storyboard 'Settings' as 'DeleteAccountVC'.") }
        if dislikeUsersVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'dislikeUsersVC' could not be loaded from storyboard 'Settings' as 'DislikeUsersVC'.") }
        if editFavouritesVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'editFavouritesVC' could not be loaded from storyboard 'Settings' as 'EditFavouritesVC'.") }
        if editLifeStyleVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'editLifeStyleVC' could not be loaded from storyboard 'Settings' as 'EditLifeStyleVC'.") }
        if editLooksVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'editLooksVC' could not be loaded from storyboard 'Settings' as 'EditLooksVC'.") }
        if editPersonalityVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'editPersonalityVC' could not be loaded from storyboard 'Settings' as 'EditPersonalityVC'.") }
        if editProfileVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Settings' as 'EditProfileVC'.") }
        if favoriteVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'favoriteVC' could not be loaded from storyboard 'Settings' as 'FavoriteVC'.") }
        if helpVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'helpVC' could not be loaded from storyboard 'Settings' as 'HelpVC'.") }
        if inviteFriendsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'inviteFriendsVC' could not be loaded from storyboard 'Settings' as 'InviteFriendsVC'.") }
        if likedUsersVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'likedUsersVC' could not be loaded from storyboard 'Settings' as 'LikedUsersVC'.") }
        if listFriendsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'listFriendsVC' could not be loaded from storyboard 'Settings' as 'ListFriendsVC'.") }
        if mapController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'mapController' could not be loaded from storyboard 'Settings' as 'MapController'.") }
        if myAccountVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'myAccountVC' could not be loaded from storyboard 'Settings' as 'MyAccountVC'.") }
        if myAffliatesVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'myAffliatesVC' could not be loaded from storyboard 'Settings' as 'MyAffliatesVC'.") }
        if sessionsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'sessionsVC' could not be loaded from storyboard 'Settings' as 'SessionsVC'.") }
        if settingsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'Settings' as 'SettingsVC'.") }
        if socialLinkVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'socialLinkVC' could not be loaded from storyboard 'Settings' as 'SocialLinkVC'.") }
        if transactionsListViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'transactionsListViewController' could not be loaded from storyboard 'Settings' as 'TransactionsListViewController'.") }
        if twoFactorUpdateVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'twoFactorUpdateVC' could not be loaded from storyboard 'Settings' as 'TwoFactorUpdateVC'.") }
        if updateTwoFactorSettingPopupVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'updateTwoFactorSettingPopupVC' could not be loaded from storyboard 'Settings' as 'UpdateTwoFactorSettingPopupVC'.") }
        if withdrawalsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'withdrawalsVC' could not be loaded from storyboard 'Settings' as 'WithdrawalsVC'.") }
        if profileVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'profileVC' could not be loaded from storyboard 'Settings' as 'profileVC'.") }
      }
    }

    /// Storyboard `Trending`.
    struct trending: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Trending"

      var backgroundFilterVC: RswiftResources.StoryboardViewControllerIdentifier<BackgroundFilterVC> { .init(identifier: "BackgroundFilterVC", storyboard: name, bundle: bundle) }
      var basicFilterVC: RswiftResources.StoryboardViewControllerIdentifier<BasicFilterVC> { .init(identifier: "BasicFilterVC", storyboard: name, bundle: bundle) }
      var filterParentVC: RswiftResources.StoryboardViewControllerIdentifier<FilterParentVC> { .init(identifier: "FilterParentVC", storyboard: name, bundle: bundle) }
      var hotOrNotVC: RswiftResources.StoryboardViewControllerIdentifier<HotOrNotVC> { .init(identifier: "HotOrNotVC", storyboard: name, bundle: bundle) }
      var lifeStyleFilterVC: RswiftResources.StoryboardViewControllerIdentifier<LifeStyleFilterVC> { .init(identifier: "LifeStyleFilterVC", storyboard: name, bundle: bundle) }
      var looksFilterVC: RswiftResources.StoryboardViewControllerIdentifier<LooksFilterVC> { .init(identifier: "LooksFilterVC", storyboard: name, bundle: bundle) }
      var moreFilterVC: RswiftResources.StoryboardViewControllerIdentifier<MoreFilterVC> { .init(identifier: "MoreFilterVC", storyboard: name, bundle: bundle) }
      var trendingListVC: RswiftResources.StoryboardViewControllerIdentifier<TrendingListVC> { .init(identifier: "TrendingListVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "abacus", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'abacus' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "arrowBack", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'arrowBack' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "button gradient", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'button gradient' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chevronRightRound24px", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'chevronRightRound24px' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_birthday", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_birthday' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_body_height", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_body_height' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_distance", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_distance' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_drink", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_drink' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_education", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_education' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_ethnicity", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_ethnicity' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_expand_more", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_expand_more' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_filter", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_filter' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_filter_language", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_filter_language' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_bg", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_home_bg' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_interest", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_interest' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_noFav", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_noFav' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_online_them_color", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_online_them_color' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pets", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_pets' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_relationship", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_relationship' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_religion", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_religion' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_smoke", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_smoke' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ic_user' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIImage(named: "locationFilled24px", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'locationFilled24px' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIColor(named: "primaryBackgroundColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryBackgroundColor' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIColor(named: "primaryEndColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryEndColor' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIColor(named: "primaryTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'primaryTextColor' is used in storyboard 'Trending', but couldn't be loaded.") }
        if UIKit.UIColor(named: "secondaryTextColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'secondaryTextColor' is used in storyboard 'Trending', but couldn't be loaded.") }
        if backgroundFilterVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'backgroundFilterVC' could not be loaded from storyboard 'Trending' as 'BackgroundFilterVC'.") }
        if basicFilterVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'basicFilterVC' could not be loaded from storyboard 'Trending' as 'BasicFilterVC'.") }
        if filterParentVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'filterParentVC' could not be loaded from storyboard 'Trending' as 'FilterParentVC'.") }
        if hotOrNotVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'hotOrNotVC' could not be loaded from storyboard 'Trending' as 'HotOrNotVC'.") }
        if lifeStyleFilterVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'lifeStyleFilterVC' could not be loaded from storyboard 'Trending' as 'LifeStyleFilterVC'.") }
        if looksFilterVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'looksFilterVC' could not be loaded from storyboard 'Trending' as 'LooksFilterVC'.") }
        if moreFilterVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'moreFilterVC' could not be loaded from storyboard 'Trending' as 'MoreFilterVC'.") }
        if trendingListVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'trendingListVC' could not be loaded from storyboard 'Trending' as 'TrendingListVC'.") }
      }
    }
  }
}